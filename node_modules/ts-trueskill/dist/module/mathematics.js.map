{"version":3,"file":"mathematics.js","sourceRoot":"","sources":["../../src/mathematics.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,OAAO,aAAa;IACxB;;;OAGG;IACH,YACE,KAAoB,IAAI,EACxB,QAAuB,IAAI,EACpB,KAAK,CAAC,EACN,MAAM,CAAC;QADP,OAAE,GAAF,EAAE,CAAI;QACN,QAAG,GAAH,GAAG,CAAI;QAEd,IAAI,EAAE,KAAK,IAAI,EAAE;YACf,IAAI,KAAK,KAAK,IAAI,EAAE;gBAClB,MAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAC;aACjD;YAED,IAAI,KAAK,KAAK,CAAC,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;aACtD;YAED,EAAE,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC;SACf;QAED,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,IAAI,EAAE;QACJ,OAAO,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;IACvC,CAAC;IAED,IAAI,KAAK;QACP,IAAI,IAAI,CAAC,EAAE,EAAE;YACX,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;SAC/B;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,GAAG,CAAC,KAAoB;QACtB,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;QAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QACjC,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;IAChD,CAAC;IAED,GAAG,CAAC,KAAoB;QACtB,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;QAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QACjC,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;IAChD,CAAC;IAED,QAAQ;QACN,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACxC,OAAO,QAAQ,EAAE,WAAW,KAAK,GAAG,CAAC;IACvC,CAAC;CACF","sourcesContent":["/**\n * A model for the normal distribution.\n */\nexport class SkillGaussian {\n  /**\n   * @param pi - Precision, the inverse of the variance.\n   * @param tau - Precision adjusted mean, the precision multiplied by the mean\n   */\n  constructor(\n    mu: number | null = null,\n    sigma: number | null = null,\n    public pi = 0,\n    public tau = 0,\n  ) {\n    if (mu !== null) {\n      if (sigma === null) {\n        throw new TypeError('sigma argument is needed');\n      }\n\n      if (sigma === 0) {\n        throw new Error('sigma**2 should be greater than 0');\n      }\n\n      pi = (sigma ** -2);\n      tau = pi * mu;\n    }\n\n    this.pi = pi;\n    this.tau = tau;\n  }\n\n  /**\n   * A property which returns the mean.\n   */\n  get mu(): number {\n    return this.pi && this.tau / this.pi;\n  }\n\n  get sigma(): number {\n    if (this.pi) {\n      return Math.sqrt(1 / this.pi);\n    }\n\n    return Infinity;\n  }\n\n  mul(other: SkillGaussian): SkillGaussian {\n    const pi = this.pi + other.pi;\n    const tau = this.tau + other.tau;\n    return new SkillGaussian(null, null, pi, tau);\n  }\n\n  div(other: SkillGaussian): SkillGaussian {\n    const pi = this.pi - other.pi;\n    const tau = this.tau - other.tau;\n    return new SkillGaussian(null, null, pi, tau);\n  }\n\n  toString(): string {\n    const mu = this.mu.toPrecision(3);\n    const sigma = this.sigma.toPrecision(3);\n    return `N(mu=${mu}, sigma=${sigma})`;\n  }\n}\n"]}