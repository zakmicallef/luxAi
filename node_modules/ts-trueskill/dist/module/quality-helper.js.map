{"version":3,"file":"quality-helper.js","sourceRoot":"","sources":["../../src/quality-helper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,OAAO,EAAE,MAAM,QAAQ,CAAC;AAI3C,MAAM,UAAU,oBAAoB,CAClC,cAAwB,EACxB,MAAc,EACd,KAAa;IAEb,MAAM,MAAM,GAAG,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;IACjD,MAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;IACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACzC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;KAClC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,oBAAoB,CAClC,eAA2B,EAC3B,cAAwB;IAExB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,MAAM,MAAM,GAAG,OAAO,EAAE,CAAC;IACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACnD,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CACvB,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EACrC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAChB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACR,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,CAAC,IAAI,CAAC,CAAC;YACP,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1D,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;SACxC;QAED,CAAC,EAAE,CAAC;KACL;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { matrix as mMatrix } from 'mathjs';\n\nimport { Rating } from './rating';\n\nexport function createVarianceMatrix(\n  flattenRatings: Rating[],\n  height: number,\n  width: number,\n) {\n  const matrix = mMatrix().resize([height, width]);\n  const variances = flattenRatings.map(r => r.sigma ** 2);\n  for (let i = 0; i < variances.length; i++) {\n    matrix.set([i, i], variances[i]);\n  }\n\n  return matrix;\n}\n\nexport function createRotatedAMatrix(\n  newRatingGroups: Rating[][],\n  flattenWeights: number[],\n) {\n  let t = 0;\n  let r = 0;\n  const matrix = mMatrix();\n  for (let i = 0; i < newRatingGroups.length - 1; i++) {\n    const setter = Array.from(\n      { length: newRatingGroups[i].length },\n      (_, n) => n + t,\n    ).map(z => {\n      matrix.set([r, z], flattenWeights[z]);\n      t += 1;\n      return z;\n    });\n    const x = setter[setter.length - 1] + 1;\n    for (let d = x; d < newRatingGroups[i + 1].length + x; d++) {\n      matrix.set([r, d], -flattenWeights[d]);\n    }\n\n    r++;\n  }\n\n  return matrix;\n}\n"]}