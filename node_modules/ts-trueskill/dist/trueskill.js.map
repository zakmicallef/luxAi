{"version":3,"file":"trueskill.js","sourceRoot":"","sources":["../src/trueskill.ts"],"names":[],"mappings":"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","sourcesContent":["import { flatten, zipObject } from 'lodash';\nimport { add, det, exp, inv, matrix, multiply, transpose } from 'mathjs';\nimport { Gaussian } from 'ts-gaussian';\n\nimport {\n  LikelihoodFactor,\n  PriorFactor,\n  SumFactor,\n  TruncateFactor,\n  Variable,\n} from './factorgraph';\nimport { createRotatedAMatrix, createVarianceMatrix } from './quality-helper';\nimport { Rating } from './rating';\n\n/**\n * Calculates a draw-margin from the given drawProbability\n */\nexport function calcDrawMargin(\n  drawProbability: number,\n  size: number,\n  // tslint:disable-next-line:no-use-before-declare\n  env = new TrueSkill(),\n) {\n  return (\n    env.guassian.ppf((drawProbability + 1) / 2) * Math.sqrt(size) * env.beta\n  );\n}\n\n/**\n * Makes a size map of each teams.\n */\nfunction _teamSizes(ratingGroups: Rating[][]) {\n  const teamSizes = [0];\n  ratingGroups.map(group =>\n    teamSizes.push(group.length + teamSizes[teamSizes.length - 1]),\n  );\n  teamSizes.shift();\n  return teamSizes;\n}\n\n/**\n * Implements a TrueSkill environment.  An environment could have\n * customized constants.  Every games have not same design and may need to\n * customize TrueSkill constants.\n *\n * For example, 60% of matches in your game have finished as draw then you\n * should set ``draw_probability`` to 0.60\n *\n * const env = new TrueSkill(undefined, undefined, undefined, undefined, 0.6);\n *\n * For more details of the constants, see [The Math Behind TrueSkill by\n * Jeff Moser](http://www.moserware.com/assets/computing-your-skill/The%20Math%20Behind%20TrueSkill.pdf).\n */\nexport class TrueSkill {\n  sigma!: number;\n\n  beta!: number;\n\n  tau!: number;\n\n  /**\n   * @param mu initial mean of ratings\n   * @param sigma initial standard deviation of ratings\n   * @param beta distance that guarantees about 76% chance of winning\n   * @param tau dynamic factor\n   * @param drawProbability draw probability of the game\n   * @param guassian reuseable gaussian\n   */\n  constructor(\n    public mu = 25,\n    sigma?: number,\n    beta?: number,\n    tau?: number,\n    public drawProbability = 0.1,\n    public guassian = new Gaussian(0, 1),\n  ) {\n    if (sigma === undefined || sigma === null) {\n      this.sigma = mu / 3;\n    }\n\n    if (beta === undefined || beta === null) {\n      this.beta = this.sigma / 2;\n    }\n\n    if (tau === undefined || tau === null) {\n      this.tau = this.sigma / 100;\n    }\n  }\n\n  /**\n   * Recalculates ratings by the ranking table\n   */\n  rate(\n    ratingGroups: Rating[][] | any[],\n    ranks: number[] | null = null,\n    weights: number[][] | null = null,\n    minDelta = 0.0001,\n  ): Rating[][] | any[] {\n    const [newRatingGroups, keys] = this._validateRatingGroups(ratingGroups);\n    weights = this._validateWeights(newRatingGroups, weights);\n    const groupSize = ratingGroups.length;\n    if (ranks && ranks.length !== groupSize) {\n      throw new Error('Wrong ranks');\n    }\n\n    const newRanks = ranks ?\n      ranks :\n      Array.from({ length: groupSize }, (_, i) => i);\n    // Sort rating groups by rank\n    const zip: Array<[Rating[], number, number[]]> = [];\n    for (let idx = 0; idx < newRatingGroups.length; idx++) {\n      zip.push([newRatingGroups[idx], newRanks[idx], weights[idx]]);\n    }\n\n    let position = 0;\n    const positions = zip.map(el => {\n      const res: [number, [Rating[], number, number[]]] = [position, el];\n      position++;\n      return res;\n    });\n    const sorting = positions.sort((a, b) => a[1][1] - b[1][1]);\n    const sortedRatingGroups: Rating[][] = [];\n    const sortedRanks: number[] = [];\n    const sortedWeights: number[][] = [];\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [x, [g, r, w]] of sorting) {\n      sortedRatingGroups.push(g);\n      sortedRanks.push(r);\n      // Make weights to be greater than 0\n      const max = w.map((ww: number) => Math.max(minDelta, ww));\n      sortedWeights.push(max);\n    }\n\n    // Build factor graph\n    const flattenRatings = flatten(sortedRatingGroups);\n    const flattenWeights = flatten(sortedWeights);\n    const size = flattenRatings.length;\n    // Create variables\n    const fill = Array.from({ length: size }, (_, i) => i);\n    const ratingVars = fill.map(() => new Variable());\n    const perfVars = fill.map(() => new Variable());\n    const teamPerfVars = Array.from({ length: groupSize }, (_, i) => i).map(\n      () => new Variable(),\n    );\n    const teamDiffVars = Array.from({ length: groupSize - 1 }, (_, i) => i).map(\n      () => new Variable(),\n    );\n    const teamSizes = _teamSizes(sortedRatingGroups);\n    // Layer builders\n    const layers = this._runSchedule(\n      ratingVars,\n      flattenRatings,\n      perfVars,\n      teamPerfVars,\n      teamSizes,\n      flattenWeights,\n      teamDiffVars,\n      sortedRanks,\n      sortedRatingGroups,\n      minDelta,\n    );\n    const transformedGroups: Rating[][] = [];\n    const trimmed = [0].concat(teamSizes.slice(0, teamSizes.length - 1));\n    for (let idx = 0; idx < teamSizes.length; idx++) {\n      const group = layers\n        .slice(trimmed[idx], teamSizes[idx])\n        .map((f: PriorFactor) => new Rating(f.v.mu, f.v.sigma));\n      transformedGroups.push(group);\n    }\n\n    const pulledTranformedGroups: Array<[number, Rating[]]> = [];\n    for (let idx = 0; idx < sorting.length; idx++) {\n      pulledTranformedGroups.push([sorting[idx][0], transformedGroups[idx]]);\n    }\n\n    const unsorting = pulledTranformedGroups.sort((a, b) => a[0] - b[0]);\n    if (!keys) {\n      return unsorting.map(k => k[1]);\n    }\n\n    return unsorting.map(v => {\n      return zipObject(keys[v[0]], v[1]);\n    });\n  }\n\n  /**\n   * Calculates the match quality of the given rating groups. Result\n   * is the draw probability in the association::\n   *\n   *   env = TrueSkill()\n   *   if env.quality([team1, team2, team3]) < 0.50 {\n   *     console.log('This match seems to be not so fair')\n   *   }\n   */\n  quality(ratingGroups: Rating[][], weights?: number[][]): number {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [newRatingGroups, _keys] = this._validateRatingGroups(ratingGroups);\n    const newWeights = this._validateWeights(ratingGroups, weights);\n    const flattenRatings = flatten(ratingGroups);\n    const flattenWeights = flatten(newWeights);\n    const { length } = flattenRatings;\n    // A vector of all of the skill means\n    const meanMatrix = matrix(flattenRatings.map(r => [r.mu]));\n    const varianceMatrix = createVarianceMatrix(flattenRatings, length, length);\n    const rotatedAMatrix = createRotatedAMatrix(\n      newRatingGroups,\n      flattenWeights,\n    );\n    const aMatrix = transpose(rotatedAMatrix);\n    // Match quality further derivation\n    const modifiedRotatedAMatrix = rotatedAMatrix.map(\n      (value: number, _: any, __: any) => (this.beta ** 2) * value,\n    );\n    const start = multiply(transpose(meanMatrix), aMatrix);\n    const ata = multiply(modifiedRotatedAMatrix, aMatrix);\n    const atsa = multiply(rotatedAMatrix, multiply(varianceMatrix, aMatrix));\n    const middle: any = add(ata, atsa);\n    const end = multiply(rotatedAMatrix, meanMatrix);\n    // Make result\n    const eArg = det(\n      multiply(multiply([[-0.5]], multiply(start, inv(middle))), end),\n    );\n    const sArg = det(ata) / det(middle);\n    return exp(eArg) * Math.sqrt(sArg);\n  }\n\n  /**\n   * Initializes new `Rating` object, but it fixes default mu and\n   * sigma to the environment's.\n   * var env = TrueSkill(mu=0, sigma=1)\n   * var env.createRating()\n   * trueskill.Rating(mu=0.000, sigma=1.000)\n   */\n  createRating(mu = this.mu, sigma = this.sigma): Rating {\n    return new Rating(mu, sigma);\n  }\n\n  /**\n   * Returns the value of the rating exposure.  It starts from 0 and\n   * converges to the mean.  Use this as a sort key in a leaderboard\n   */\n  expose(rating: Rating): number {\n    const k = this.mu / this.sigma;\n    return (rating.mu - k) * rating.sigma;\n  }\n\n  /**\n   * Taken from https://github.com/sublee/trueskill/issues/1\n   */\n  winProbability(a: Rating[], b: Rating[]): number {\n    const deltaMu =\n      a.reduce((t, cur) => t + cur.mu, 0) - b.reduce((t, cur) => t + cur.mu, 0);\n    const sumSigma =\n      a.reduce((t, n) => (n.sigma ** 2) + t, 0) +\n      b.reduce((t, n) => (n.sigma ** 2) + t, 0);\n    const playerCount = a.length + b.length;\n    const denominator = Math.sqrt(playerCount * ((this.beta * this.beta) + sumSigma));\n    return this.guassian.cdf(deltaMu / denominator);\n  }\n\n  /**\n   * The non-draw version of \"V\" function.\n   * \"V\" calculates a variation of a mean.\n   */\n  private _vWin(diff: number, drawMargin: number) {\n    const x = diff - drawMargin;\n    const denom = this.guassian.cdf(x);\n    return denom ? this.guassian.pdf(x) / denom : -x;\n  }\n\n  private _vDraw(diff: number, drawMargin: number) {\n    const absDiff = Math.abs(diff);\n    const [a, b] = [drawMargin - absDiff, -drawMargin - absDiff];\n    const denom = this.guassian.cdf(a) - this.guassian.cdf(b);\n    const numer = this.guassian.pdf(b) - this.guassian.pdf(a);\n    return (denom ? numer / denom : a) * (diff < 0 ? -1 : +1);\n  }\n\n  /**\n   * The non-draw version of \"W\" function.\n   * \"W\" calculates a variation of a standard deviation.\n   */\n  private _wWin(diff: number, drawMargin: number) {\n    const x = diff - drawMargin;\n    const v = this._vWin(diff, drawMargin);\n    const w = v * (v + x);\n    if (w > 0 && w < 1) {\n      return w;\n    }\n\n    throw new Error('floating point error');\n  }\n\n  /**\n   * The draw version of \"W\" function.\n   */\n  private _wDraw(diff: number, drawMargin: number) {\n    const absDiff = Math.abs(diff);\n    const a = drawMargin - absDiff;\n    const b = -drawMargin - absDiff;\n    const denom = this.guassian.cdf(a) - this.guassian.cdf(b);\n    if (!denom) {\n      throw new Error('Floating point error');\n    }\n\n    const v = this._vDraw(absDiff, drawMargin);\n    return (\n      // eslint-disable-next-line no-mixed-operators\n      v ** 2 + (a * this.guassian.pdf(a) - b * this.guassian.pdf(b)) / denom\n    );\n  }\n\n  /**\n   * Validates a ratingGroups argument. It should contain more than\n   * 2 groups and all groups must not be empty.\n   */\n  private _validateRatingGroups(\n    ratingGroups: Rating[][] | any[],\n  ): [Rating[][], string[][] | null] {\n    if (ratingGroups.length < 2) {\n      throw new Error('Need multiple rating groups');\n    }\n\n    for (const group of ratingGroups) {\n      if (group.length === 0) {\n        throw new Error('Each group must contain multiple ratings');\n      }\n\n      if (group instanceof Rating) {\n        throw new Error('Rating cannot be a rating group');\n      }\n    }\n\n    if (!Array.isArray(ratingGroups[0])) {\n      const keys: string[][] = [];\n      const newRatingGroups: Rating[][] = [];\n      for (const dictRatingGroup of ratingGroups) {\n        const keyGroup = Object.keys(dictRatingGroup);\n        const ratingGroup: Rating[] = keyGroup.map(n => dictRatingGroup[n]);\n        newRatingGroups.push(ratingGroup);\n        keys.push(keyGroup);\n      }\n\n      return [newRatingGroups, keys];\n    }\n\n    return [ratingGroups, null];\n  }\n\n  private _validateWeights(\n    ratingGroups: Rating[][],\n    weights?: number[][] | null,\n  ): number[][] {\n    if (!weights) {\n      return ratingGroups.map(n => Array(n.length).fill(1));\n    }\n\n    return weights;\n  }\n\n  private _buildRatingLayer(ratingVars: Variable[], flattenRatings: Rating[]) {\n    const t = this.tau;\n    return ratingVars.map(\n      (n, idx) => new PriorFactor(n, flattenRatings[idx], t),\n    );\n  }\n\n  private _buildPerfLayer(ratingVars: Variable[], perfVars: Variable[]) {\n    const b = this.beta ** 2;\n    return ratingVars.map(\n      (n, idx) => new LikelihoodFactor(n, perfVars[idx], b),\n    );\n  }\n\n  private _buildTeamPerfLayer(\n    teamPerfVars: Variable[],\n    perfVars: Variable[],\n    teamSizes: number[],\n    flattenWeights: number[],\n  ) {\n    let team = 0;\n    return teamPerfVars.map(teamPerfVar => {\n      const start = team > 0 ? teamSizes[team - 1] : 0;\n      const end = teamSizes[team];\n      team += 1;\n      return new SumFactor(\n        teamPerfVar,\n        perfVars.slice(start, end),\n        flattenWeights.slice(start, end),\n      );\n    });\n  }\n\n  private _buildTeamDiffLayer(\n    teamPerfVars: Variable[],\n    teamDiffVars: Variable[],\n  ) {\n    let team = 0;\n    return teamDiffVars.map(teamDiffVar => {\n      const sl = teamPerfVars.slice(team, team + 2);\n      team++;\n      return new SumFactor(teamDiffVar, sl, [1, -1]);\n    });\n  }\n\n  private _buildTruncLayer(\n    teamDiffVars: Variable[],\n    sortedRanks: number[],\n    sortedRatingGroups: Rating[][],\n  ) {\n    let x = 0;\n    return teamDiffVars.map(teamDiffVar => {\n      // Static draw probability\n      const { drawProbability } = this;\n      const lengths = sortedRatingGroups.slice(x, x + 2).map(n => n.length);\n      const drawMargin = calcDrawMargin(\n        drawProbability,\n        lengths.reduce((t, n) => t + n, 0),\n        this,\n      );\n      let vFunc = (a: number, b: number) => this._vWin(a, b);\n      let wFunc = (a: number, b: number) => this._wWin(a, b);\n      if (sortedRanks[x] === sortedRanks[x + 1]) {\n        vFunc = (a, b) => this._vDraw(a, b);\n        wFunc = (a, b) => this._wDraw(a, b);\n      }\n\n      x++;\n      return new TruncateFactor(teamDiffVar, vFunc, wFunc, drawMargin);\n    });\n  }\n\n  /**\n   * Sends messages within every nodes of the factor graph\n   * until the result is reliable.\n   */\n  private _runSchedule(\n    ratingVars: Variable[],\n    flattenRatings: Rating[],\n    perfVars: Variable[],\n    teamPerfVars: Variable[],\n    teamSizes: number[],\n    flattenWeights: number[],\n    teamDiffVars: Variable[],\n    sortedRanks: number[],\n    sortedRatingGroups: Rating[][],\n    minDelta = 0.0001,\n  ) {\n    if (minDelta <= 0) {\n      throw new Error('minDelta must be greater than 0');\n    }\n\n    const ratingLayer = this._buildRatingLayer(ratingVars, flattenRatings);\n    const perfLayer = this._buildPerfLayer(ratingVars, perfVars);\n    const teamPerfLayer = this._buildTeamPerfLayer(\n      teamPerfVars,\n      perfVars,\n      teamSizes,\n      flattenWeights,\n    );\n    ratingLayer.map(f => f.down());\n    perfLayer.map(f => f.down());\n    teamPerfLayer.map(f => f.down());\n    // Arrow #1, #2, #3\n    const teamDiffLayer = this._buildTeamDiffLayer(teamPerfVars, teamDiffVars);\n    const truncLayer = this._buildTruncLayer(\n      teamDiffVars,\n      sortedRanks,\n      sortedRatingGroups,\n    );\n    const teamDiffLen = teamDiffLayer.length;\n    for (let index = 0; index <= 10; index++) {\n      let delta = 0;\n      if (teamDiffLen === 1) {\n        // Only two teams\n        teamDiffLayer[0].down();\n        delta = truncLayer[0].up();\n      } else {\n        // Multiple teams\n        delta = 0;\n        for (let z = 0; z < teamDiffLen - 1; z++) {\n          teamDiffLayer[z].down();\n          delta = Math.max(delta, truncLayer[z].up());\n          teamDiffLayer[z].up(1);\n        }\n\n        for (let z = teamDiffLen - 1; z > 0; z--) {\n          teamDiffLayer[z].down();\n          delta = Math.max(delta, truncLayer[z].up());\n          teamDiffLayer[z].up(0);\n        }\n      }\n\n      // Repeat until too small update\n      if (delta <= minDelta) {\n        break;\n      }\n    }\n\n    // Up both ends\n    teamDiffLayer[0].up(0);\n    teamDiffLayer[teamDiffLen - 1].up(1);\n    // Up the remainder of the black arrows\n    for (const f of teamPerfLayer) {\n      for (let x = 0; x < f.vars.length - 1; x++) {\n        f.up(x);\n      }\n    }\n\n    for (const f of perfLayer) {\n      f.up();\n    }\n\n    return ratingLayer;\n  }\n}\n\n/**\n * A shortcut to rate just 2 players in a head-to-head match\n */\nexport function rate_1vs1(\n  rating1: Rating,\n  rating2: Rating,\n  drawn = false,\n  minDelta = 0.0001,\n  env: TrueSkill = new TrueSkill(),\n): [Rating, Rating] {\n  const ranks = [0, drawn ? 0 : 1];\n  const teams = env.rate([[rating1], [rating2]], ranks, undefined, minDelta);\n  return [teams[0][0], teams[1][0]];\n}\n\n/**\n * A shortcut to calculate the match quality between 2 players in\n * a head-to-head match\n */\nexport function quality_1vs1(\n  rating1: Rating,\n  rating2: Rating,\n  env: TrueSkill = new TrueSkill(),\n) {\n  return env.quality([[rating1], [rating2]]);\n}\n\n/**\n * A proxy function for `TrueSkill.rate` of the global environment.\n */\nexport function rate(\n  ratingGroups: Rating[][] | any[],\n  ranks?: any[] | null,\n  weights?: any[] | null,\n  minDelta = 0.0001,\n  env: TrueSkill = new TrueSkill(),\n): Rating[][] {\n  return env.rate(ratingGroups, ranks, weights, minDelta);\n}\n\nexport function winProbability(\n  a: Rating[],\n  b: Rating[],\n  env: TrueSkill = new TrueSkill(),\n) {\n  return env.winProbability(a, b);\n}\n\n/**\n * A proxy function for `TrueSkill.quality` of the global\n * environment.\n */\nexport function quality(\n  ratingGroups: Rating[][] | any[],\n  weights?: number[][],\n  env: TrueSkill = new TrueSkill(),\n) {\n  return env.quality(ratingGroups, weights);\n}\n\n/**\n * A proxy function for TrueSkill.expose of the global environment.\n */\nexport function expose(rating: Rating, env: TrueSkill = new TrueSkill()) {\n  return env.expose(rating);\n}\n"]}