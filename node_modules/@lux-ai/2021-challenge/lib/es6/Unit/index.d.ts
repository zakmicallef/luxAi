import { LuxMatchConfigs } from '../types';
import { Game } from '../Game';
import { Actionable } from '../Actionable';
import { Resource } from '../Resource';
import { Position } from '../GameMap/position';
export declare abstract class Unit extends Actionable {
    type: Unit.Type;
    team: Unit.TEAM;
    id: string;
    cargo: Unit.Cargo;
    pos: Position;
    constructor(x: number, y: number, type: Unit.Type, team: Unit.TEAM, configs: LuxMatchConfigs, idcount: number);
    getCargoSpaceLeft(): number;
    /**
     * force unit to spend as much fuel as needed to get past upkeep amount. spends wood, then coal, then uranium
     * returns true if survived, false if not.
     */
    spendFuelToSurvive(): boolean;
    abstract getLightUpkeep(): number;
    abstract canMove(): boolean;
}
export declare namespace Unit {
    enum Type {
        WORKER = 0,
        CART = 1
    }
    /**
     * Team constants. The same as the agent ids
     */
    enum TEAM {
        A = 0,
        B = 1
    }
    type Cargo = {
        [x in Resource.Types]: number;
    };
}
export declare class Cart extends Unit {
    constructor(x: number, y: number, team: Unit.TEAM, configs: LuxMatchConfigs, idcount: number);
    getLightUpkeep(): number;
    canMove(): boolean;
    turn(game: Game): void;
}
export declare class Worker extends Unit {
    constructor(x: number, y: number, team: Unit.TEAM, configs: LuxMatchConfigs, idcount: number);
    getLightUpkeep(): number;
    canMove(): boolean;
    expendResourcesForCity(): void;
    turn(game: Game): void;
}
