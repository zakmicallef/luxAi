import fs from 'fs';
import JSZip from 'jszip';
import path from 'path';
import { GameMap } from '../GameMap';
import pkg from '../configs.json';
export class Replay {
    constructor(match, compressReplay, statefulReplay = false, out) {
        this.compressReplay = compressReplay;
        this.statefulReplay = statefulReplay;
        this.out = out;
        this.replayFilePath = null;
        this.data = {
            seed: 0,
            allCommands: [],
            mapType: GameMap.Types.RANDOM,
            width: -1,
            height: -1,
            teamDetails: [],
            version: pkg.version,
        };
        this.storeReplay = false;
        const d = new Date().valueOf();
        let replayFileName = `${d}_${match.id}`;
        if (statefulReplay) {
            replayFileName += '_stateful';
        }
        if (compressReplay) {
            replayFileName += '.luxr';
        }
        else {
            replayFileName += '.json';
        }
        this.replayFilePath = path.join(match.configs.storeReplayDirectory, replayFileName);
        if (out !== undefined) {
            this.replayFilePath = out;
        }
        this.storeReplay = match.configs.storeReplay;
        if (fs.existsSync && this.storeReplay) {
            if (!fs.existsSync(match.configs.storeReplayDirectory)) {
                fs.mkdirSync(match.configs.storeReplayDirectory, { recursive: true });
            }
            fs.writeFileSync(this.replayFilePath, '');
        }
        if (this.statefulReplay) {
            this.data.stateful = [];
        }
    }
    writeState(game) {
        const state = game.toStateObject();
        this.data.stateful.push(state);
    }
    writeTeams(agents) {
        agents.forEach((agent) => {
            let id = '';
            if (agent.tournamentID && agent.tournamentID.id) {
                id = agent.tournamentID.id;
            }
            this.data.teamDetails.push({
                name: agent.name,
                tournamentID: id,
            });
        });
    }
    writeOut(results) {
        this.data.results = results;
        if (!fs.appendFileSync || !this.storeReplay)
            return;
        if (this.compressReplay) {
            const zipper = new JSZip();
            zipper.file(this.replayFilePath, JSON.stringify(this.data));
            zipper
                .generateAsync({
                type: 'nodebuffer',
                compression: 'DEFLATE',
                compressionOptions: {
                    level: 9,
                },
            })
                .then((content) => {
                fs.appendFileSync(this.replayFilePath, content);
            });
        }
        else {
            fs.appendFileSync(this.replayFilePath, JSON.stringify(this.data));
        }
    }
}
//# sourceMappingURL=index.js.map