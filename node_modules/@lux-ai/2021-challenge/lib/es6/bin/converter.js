var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { create, Logger } from 'dimensions-ai';
import fs from 'fs';
import { LuxDesign } from '../design';
import path from 'path';
export const converter = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const replayFile = argv._[0];
    if (!replayFile) {
        throw Error('Need to provide path to replay file');
    }
    const replay = JSON.parse(`${fs.readFileSync(replayFile)}`);
    const lux2021 = new LuxDesign('lux_ai_2021', {
        engineOptions: {
            noStdErr: false,
            timeout: {
                max: 1200,
            },
        },
    });
    const myDimension = create(lux2021, {
        name: 'Lux AI 2021',
        loggingLevel: Logger.LEVEL.NONE,
        activateStation: false,
        observe: false,
        createBotDirectories: false,
    });
    const configs = {
        detached: true,
        agentOptions: { detached: true },
        storeReplay: false,
        storeErrorLogs: false,
        statefulReplay: true,
        seed: parseInt(replay.seed),
        mapType: replay.mapType,
    };
    const match = yield myDimension.createMatch([
        {
            file: 'blank',
            name: 'bot1',
        },
        {
            file: 'blank',
            name: 'bot2',
        },
    ], configs);
    match.agents.forEach((agent) => {
        agent.messages = [];
    });
    for (let i = 0; i < replay.allCommands.length; i++) {
        const commandsList = replay.allCommands[i];
        yield match.step(commandsList);
        match.agents.forEach((agent) => {
            agent.messages = [];
        });
    }
    const state = match.state;
    const newfilename = path.basename(replayFile).split('.')[0] + '_stateful.json';
    const newfilepath = path.join(path.dirname(replayFile), newfilename);
    fs.writeFileSync(newfilepath, JSON.stringify(state.game.replay.data));
    console.log(`Converted ${replayFile}. Stateful replay at ${newfilepath}`);
});
//# sourceMappingURL=converter.js.map