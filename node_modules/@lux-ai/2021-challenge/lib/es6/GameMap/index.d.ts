import { Cell } from '../GameMap/cell';
import { Resource } from '../Resource';
import { LuxMatchConfigs, SerializedState } from '../types';
import { Position } from './position';
export declare class GameMap {
    resources: Array<Cell>;
    height: number;
    width: number;
    /**
     * The actual map
     */
    private map;
    /**
     * Constructor to initialize empty game map with empty cells
     * @param width - width of map
     * @param height - height of map
     */
    constructor(configs: Readonly<LuxMatchConfigs>);
    sortResourcesDeterministically(): void;
    addResource(x: number, y: number, resourceType: Resource.Types, amount: number): Cell;
    getCellByPos(pos: Position): Cell;
    getCell(x: number, y: number): Cell;
    getRow(y: number): Array<Cell>;
    getAdjacentCells(cell: Cell): Array<Cell>;
    inMap(pos: Position): boolean;
    toStateObject(): SerializedState['map'];
    /**
     * Return printable map string
     */
    getMapString(): string;
}
export declare namespace GameMap {
    enum Types {
        EMPTY = "empty",
        RANDOM = "random",
        DEBUG = "debug"
    }
}
