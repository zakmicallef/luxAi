import { Game } from '../Game';
export class Position {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    static fromString(string) {
        return Position.fromArray(string.split(",").map(str => parseInt(str)));
    }
    static fromArray(arr) {
        return new Position(arr[0], arr[1]);
    }
    isAdjacent(pos) {
        const dx = this.x - pos.x;
        const dy = this.y - pos.y;
        if (Math.abs(dx) + Math.abs(dy) > 1) {
            return false;
        }
        return true;
    }
    translate(direction, units = 1) {
        switch (direction) {
            case Game.DIRECTIONS.NORTH:
                return new Position(this.x, this.y - units);
            case Game.DIRECTIONS.EAST:
                return new Position(this.x + units, this.y);
            case Game.DIRECTIONS.SOUTH:
                return new Position(this.x, this.y + units);
            case Game.DIRECTIONS.WEST:
                return new Position(this.x - units, this.y);
            case Game.DIRECTIONS.CENTER:
                return new Position(this.x, this.y);
        }
    }
    equals(other) {
        return this.x == other.x && this.y == other.y;
    }
    toString() {
        return `${this.x},${this.y}`;
    }
}
//# sourceMappingURL=position.js.map