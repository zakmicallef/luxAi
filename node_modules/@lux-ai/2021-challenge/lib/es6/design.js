var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Design, } from 'dimensions-ai';
import { LuxDesignLogic } from './logic';
export class LuxDesign extends Design {
    constructor(name, options = {}) {
        super(name, options);
    }
    initialize(match) {
        return __awaiter(this, void 0, void 0, function* () {
            return LuxDesignLogic.initialize(match);
        });
    }
    update(match, commands) {
        return __awaiter(this, void 0, void 0, function* () {
            return LuxDesignLogic.update(match, commands);
        });
    }
    // Result calculation of concluded match. Should return the results of a match after it finishes
    getResults(match) {
        return __awaiter(this, void 0, void 0, function* () {
            return LuxDesignLogic.getResults(match);
        });
    }
    static resultHandler(results) {
        const rankings = [];
        for (let i = 0; i < results.ranks.length; i++) {
            const info = results.ranks[i];
            rankings.push({ rank: info.rank, agentID: info.agentID });
        }
        return { ranks: rankings };
    }
}
//# sourceMappingURL=design.js.map