import { Actionable } from '../Actionable';
import { SpawnCartAction, SpawnWorkerAction, ResearchAction } from '../Actions';
/**
 * A city is composed of adjacent city tiles of the same team
 */
export class City {
    constructor(team, configs, idcount) {
        this.team = team;
        this.configs = configs;
        /**
         * fuel stored in city
         */
        this.fuel = 0;
        /**
         * the map cells that compose this city
         */
        this.citycells = [];
        this.id = 'c_' + idcount;
    }
    getLightUpkeep() {
        return (this.citycells.length * this.configs.parameters.LIGHT_UPKEEP.CITY -
            this.getAdjacencyBonuses());
    }
    getAdjacencyBonuses() {
        let bonus = 0;
        this.citycells.forEach((cell) => {
            bonus +=
                cell.citytile.adjacentCityTiles *
                    this.configs.parameters.CITY_ADJACENCY_BONUS;
        });
        return bonus;
    }
    addCityTile(cell) {
        this.citycells.push(cell);
    }
}
export class CityTile extends Actionable {
    constructor(team, configs) {
        super(configs);
        this.team = team;
        this.pos = null;
        /** dynamically updated counter for number of friendly adjacent city tiles */
        this.adjacentCityTiles = 0;
    }
    // for validation purposes
    getTileID() {
        return `${this.cityid}_${this.pos.x}_${this.pos.y}`;
    }
    canBuildUnit() {
        return this.canAct();
    }
    canResearch() {
        return this.canAct();
    }
    turn(game) {
        if (this.currentActions.length === 1) {
            const action = this.currentActions[0];
            if (action instanceof SpawnCartAction) {
                game.spawnCart(action.team, action.x, action.y);
                this.resetCooldown();
            }
            else if (action instanceof SpawnWorkerAction) {
                game.spawnWorker(action.team, action.x, action.y);
                this.resetCooldown();
            }
            else if (action instanceof ResearchAction) {
                this.resetCooldown();
                game.state.teamStates[this.team].researchPoints++;
                if (game.state.teamStates[this.team].researchPoints >=
                    this.configs.parameters.RESEARCH_REQUIREMENTS.COAL) {
                    game.state.teamStates[this.team].researched.coal = true;
                }
                if (game.state.teamStates[this.team].researchPoints >=
                    this.configs.parameters.RESEARCH_REQUIREMENTS.URANIUM) {
                    game.state.teamStates[this.team].researched.uranium = true;
                }
            }
        }
        if (this.cooldown > 0) {
            this.cooldown--;
        }
    }
    resetCooldown() {
        this.cooldown = this.configs.parameters.CITY_ACTION_COOLDOWN;
    }
}
//# sourceMappingURL=city.js.map