"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CityTile = exports.City = void 0;
var Actionable_1 = require("../Actionable");
var Actions_1 = require("../Actions");
/**
 * A city is composed of adjacent city tiles of the same team
 */
var City = /** @class */ (function () {
    function City(team, configs, idcount) {
        this.team = team;
        this.configs = configs;
        /**
         * fuel stored in city
         */
        this.fuel = 0;
        /**
         * the map cells that compose this city
         */
        this.citycells = [];
        this.id = 'c_' + idcount;
    }
    City.prototype.getLightUpkeep = function () {
        return (this.citycells.length * this.configs.parameters.LIGHT_UPKEEP.CITY -
            this.getAdjacencyBonuses());
    };
    City.prototype.getAdjacencyBonuses = function () {
        var _this = this;
        var bonus = 0;
        this.citycells.forEach(function (cell) {
            bonus +=
                cell.citytile.adjacentCityTiles *
                    _this.configs.parameters.CITY_ADJACENCY_BONUS;
        });
        return bonus;
    };
    City.prototype.addCityTile = function (cell) {
        this.citycells.push(cell);
    };
    return City;
}());
exports.City = City;
var CityTile = /** @class */ (function (_super) {
    __extends(CityTile, _super);
    function CityTile(team, configs) {
        var _this = _super.call(this, configs) || this;
        _this.team = team;
        _this.pos = null;
        /** dynamically updated counter for number of friendly adjacent city tiles */
        _this.adjacentCityTiles = 0;
        return _this;
    }
    // for validation purposes
    CityTile.prototype.getTileID = function () {
        return this.cityid + "_" + this.pos.x + "_" + this.pos.y;
    };
    CityTile.prototype.canBuildUnit = function () {
        return this.canAct();
    };
    CityTile.prototype.canResearch = function () {
        return this.canAct();
    };
    CityTile.prototype.turn = function (game) {
        if (this.currentActions.length === 1) {
            var action = this.currentActions[0];
            if (action instanceof Actions_1.SpawnCartAction) {
                game.spawnCart(action.team, action.x, action.y);
                this.resetCooldown();
            }
            else if (action instanceof Actions_1.SpawnWorkerAction) {
                game.spawnWorker(action.team, action.x, action.y);
                this.resetCooldown();
            }
            else if (action instanceof Actions_1.ResearchAction) {
                this.resetCooldown();
                game.state.teamStates[this.team].researchPoints++;
                if (game.state.teamStates[this.team].researchPoints >=
                    this.configs.parameters.RESEARCH_REQUIREMENTS.COAL) {
                    game.state.teamStates[this.team].researched.coal = true;
                }
                if (game.state.teamStates[this.team].researchPoints >=
                    this.configs.parameters.RESEARCH_REQUIREMENTS.URANIUM) {
                    game.state.teamStates[this.team].researched.uranium = true;
                }
            }
        }
        if (this.cooldown > 0) {
            this.cooldown--;
        }
    };
    CityTile.prototype.resetCooldown = function () {
        this.cooldown = this.configs.parameters.CITY_ACTION_COOLDOWN;
    };
    return CityTile;
}(Actionable_1.Actionable));
exports.CityTile = CityTile;
//# sourceMappingURL=city.js.map