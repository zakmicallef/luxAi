"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Replay = void 0;
var fs_1 = __importDefault(require("fs"));
var jszip_1 = __importDefault(require("jszip"));
var path_1 = __importDefault(require("path"));
var GameMap_1 = require("../GameMap");
var configs_json_1 = __importDefault(require("../configs.json"));
var Replay = /** @class */ (function () {
    function Replay(match, compressReplay, statefulReplay, out) {
        if (statefulReplay === void 0) { statefulReplay = false; }
        this.compressReplay = compressReplay;
        this.statefulReplay = statefulReplay;
        this.out = out;
        this.replayFilePath = null;
        this.data = {
            seed: 0,
            allCommands: [],
            mapType: GameMap_1.GameMap.Types.RANDOM,
            width: -1,
            height: -1,
            teamDetails: [],
            version: configs_json_1.default.version,
        };
        this.storeReplay = false;
        var d = new Date().valueOf();
        var replayFileName = d + "_" + match.id;
        if (statefulReplay) {
            replayFileName += '_stateful';
        }
        if (compressReplay) {
            replayFileName += '.luxr';
        }
        else {
            replayFileName += '.json';
        }
        this.replayFilePath = path_1.default.join(match.configs.storeReplayDirectory, replayFileName);
        if (out !== undefined) {
            this.replayFilePath = out;
        }
        this.storeReplay = match.configs.storeReplay;
        if (fs_1.default.existsSync && this.storeReplay) {
            if (!fs_1.default.existsSync(match.configs.storeReplayDirectory)) {
                fs_1.default.mkdirSync(match.configs.storeReplayDirectory, { recursive: true });
            }
            fs_1.default.writeFileSync(this.replayFilePath, '');
        }
        if (this.statefulReplay) {
            this.data.stateful = [];
        }
    }
    Replay.prototype.writeState = function (game) {
        var state = game.toStateObject();
        this.data.stateful.push(state);
    };
    Replay.prototype.writeTeams = function (agents) {
        var _this = this;
        agents.forEach(function (agent) {
            var id = '';
            if (agent.tournamentID && agent.tournamentID.id) {
                id = agent.tournamentID.id;
            }
            _this.data.teamDetails.push({
                name: agent.name,
                tournamentID: id,
            });
        });
    };
    Replay.prototype.writeOut = function (results) {
        var _this = this;
        this.data.results = results;
        if (!fs_1.default.appendFileSync || !this.storeReplay)
            return;
        if (this.compressReplay) {
            var zipper = new jszip_1.default();
            zipper.file(this.replayFilePath, JSON.stringify(this.data));
            zipper
                .generateAsync({
                type: 'nodebuffer',
                compression: 'DEFLATE',
                compressionOptions: {
                    level: 9,
                },
            })
                .then(function (content) {
                fs_1.default.appendFileSync(_this.replayFilePath, content);
            });
        }
        else {
            fs_1.default.appendFileSync(this.replayFilePath, JSON.stringify(this.data));
        }
    };
    return Replay;
}());
exports.Replay = Replay;
//# sourceMappingURL=index.js.map