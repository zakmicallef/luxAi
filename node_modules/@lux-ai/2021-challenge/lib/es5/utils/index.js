"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepMerge = exports.deepCopy = exports.sleep = exports.genID = void 0;
var nanoid_1 = require("nanoid");
var ALPHA_NUM_STRING = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
/**
 * Generate a unique 12 char id
 */
exports.genID = nanoid_1.customAlphabet(ALPHA_NUM_STRING, 12);
var sleep = function (ms) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (res) {
                setTimeout(function () {
                    res();
                }, ms);
            })];
    });
}); };
exports.sleep = sleep;
/**
 * Deep copies an object and returns it
 * @param obj
 */
function deepCopy(obj) {
    var copy;
    // Handle the 3 simple types, and null or undefined
    if (null == obj || 'object' != typeof obj)
        return obj;
    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }
    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = deepCopy(obj[i]);
        }
        return copy;
    }
    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            //eslint-disable-next-line no-prototype-builtins
            if (obj.hasOwnProperty(attr))
                copy[attr] = deepCopy(obj[attr]);
        }
        return copy;
    }
    throw new Error("Unable to copy obj! Its type isn't supported.");
}
exports.deepCopy = deepCopy;
var deepMerge = function (obj1, obj2, clobberArrays) {
    if (clobberArrays === void 0) { clobberArrays = false; }
    if (obj2 == undefined || obj2 == null)
        return obj1;
    var rootKeys = Object.keys(obj2);
    rootKeys.forEach(function (key) {
        var _a;
        // if obj2 field is not an object and not an array, override obj1
        if (typeof obj2[key] !== 'object' &&
            obj2[key] &&
            obj2[key].constructor.name !== 'Array') {
            obj1[key] = obj2[key];
        }
        // otherwise if obj2 field is an array and the same field in obj1 is also an array
        else if (obj2[key] &&
            obj2[key].constructor.name == 'Array' &&
            obj1[key] &&
            obj1[key].constructor.name == 'Array') {
            // replacce array if clobberArrays is set to true
            if (clobberArrays) {
                obj1[key] = obj2[key];
            }
            // then merge the arrays if clobberArrays is false
            else {
                (_a = obj1[key]).push.apply(_a, obj2[key]);
            }
        }
        else {
            if (obj1[key] && typeof obj1[key] === 'object') {
                //If object 1 also shares a the same key as object 2 and is also an object, proceed with recursion
                obj1[key] = exports.deepMerge(obj1[key], obj2[key], clobberArrays);
            }
            else {
                //Otherwise, overwrite
                obj1[key] = obj2[key];
            }
        }
    });
    return obj1;
};
exports.deepMerge = deepMerge;
//# sourceMappingURL=index.js.map