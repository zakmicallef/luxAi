"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.converter = void 0;
var dimensions_ai_1 = require("dimensions-ai");
var fs_1 = __importDefault(require("fs"));
var design_1 = require("../design");
var path_1 = __importDefault(require("path"));
var converter = function (argv) { return __awaiter(void 0, void 0, void 0, function () {
    var replayFile, replay, lux2021, myDimension, configs, match, i, commandsList, state, newfilename, newfilepath;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                replayFile = argv._[0];
                if (!replayFile) {
                    throw Error('Need to provide path to replay file');
                }
                replay = JSON.parse("" + fs_1.default.readFileSync(replayFile));
                lux2021 = new design_1.LuxDesign('lux_ai_2021', {
                    engineOptions: {
                        noStdErr: false,
                        timeout: {
                            max: 1200,
                        },
                    },
                });
                myDimension = dimensions_ai_1.create(lux2021, {
                    name: 'Lux AI 2021',
                    loggingLevel: dimensions_ai_1.Logger.LEVEL.NONE,
                    activateStation: false,
                    observe: false,
                    createBotDirectories: false,
                });
                configs = {
                    detached: true,
                    agentOptions: { detached: true },
                    storeReplay: false,
                    storeErrorLogs: false,
                    statefulReplay: true,
                    seed: parseInt(replay.seed),
                    mapType: replay.mapType,
                };
                return [4 /*yield*/, myDimension.createMatch([
                        {
                            file: 'blank',
                            name: 'bot1',
                        },
                        {
                            file: 'blank',
                            name: 'bot2',
                        },
                    ], configs)];
            case 1:
                match = _a.sent();
                match.agents.forEach(function (agent) {
                    agent.messages = [];
                });
                i = 0;
                _a.label = 2;
            case 2:
                if (!(i < replay.allCommands.length)) return [3 /*break*/, 5];
                commandsList = replay.allCommands[i];
                return [4 /*yield*/, match.step(commandsList)];
            case 3:
                _a.sent();
                match.agents.forEach(function (agent) {
                    agent.messages = [];
                });
                _a.label = 4;
            case 4:
                i++;
                return [3 /*break*/, 2];
            case 5:
                state = match.state;
                newfilename = path_1.default.basename(replayFile).split('.')[0] + '_stateful.json';
                newfilepath = path_1.default.join(path_1.default.dirname(replayFile), newfilename);
                fs_1.default.writeFileSync(newfilepath, JSON.stringify(state.game.replay.data));
                console.log("Converted " + replayFile + ". Stateful replay at " + newfilepath);
                return [2 /*return*/];
        }
    });
}); };
exports.converter = converter;
//# sourceMappingURL=converter.js.map