"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Worker = exports.Cart = exports.Unit = void 0;
var Actions_1 = require("../Actions");
var Actionable_1 = require("../Actionable");
var position_1 = require("../GameMap/position");
var Unit = /** @class */ (function (_super) {
    __extends(Unit, _super);
    function Unit(x, y, type, team, configs, idcount) {
        var _this = _super.call(this, configs) || this;
        _this.type = type;
        _this.team = team;
        _this.cargo = {
            wood: 0,
            coal: 0,
            uranium: 0,
        };
        _this.id = 'u_' + idcount;
        _this.pos = new position_1.Position(x, y);
        return _this;
    }
    Unit.prototype.getCargoSpaceLeft = function () {
        var capacity = this.configs.parameters.RESOURCE_CAPACITY.CART;
        if (this.type === Unit.Type.WORKER) {
            capacity = this.configs.parameters.RESOURCE_CAPACITY.WORKER;
        }
        return capacity - this.cargo.wood - this.cargo.coal - this.cargo.uranium;
    };
    /**
     * force unit to spend as much fuel as needed to get past upkeep amount. spends wood, then coal, then uranium
     * returns true if survived, false if not.
     */
    Unit.prototype.spendFuelToSurvive = function () {
        var fuelNeeded = this.getLightUpkeep();
        var woodNeeded = Math.ceil(fuelNeeded / this.configs.parameters.RESOURCE_TO_FUEL_RATE.WOOD);
        var woodUsed = Math.min(this.cargo.wood, woodNeeded);
        fuelNeeded -= woodUsed * this.configs.parameters.RESOURCE_TO_FUEL_RATE.WOOD;
        this.cargo.wood -= woodUsed;
        if (fuelNeeded <= 0) {
            return true;
        }
        var coalNeeded = Math.ceil(fuelNeeded / this.configs.parameters.RESOURCE_TO_FUEL_RATE.COAL);
        var coalUsed = Math.min(this.cargo.coal, coalNeeded);
        fuelNeeded -= coalUsed * this.configs.parameters.RESOURCE_TO_FUEL_RATE.COAL;
        this.cargo.coal -= coalUsed;
        if (fuelNeeded <= 0) {
            return true;
        }
        var uraniumNeeded = Math.ceil(fuelNeeded / this.configs.parameters.RESOURCE_TO_FUEL_RATE.URANIUM);
        var uraniumUsed = Math.min(this.cargo.uranium, uraniumNeeded);
        fuelNeeded -=
            uraniumUsed * this.configs.parameters.RESOURCE_TO_FUEL_RATE.URANIUM;
        this.cargo.uranium -= uraniumUsed;
        if (fuelNeeded <= 0) {
            return true;
        }
        return fuelNeeded <= 0;
    };
    return Unit;
}(Actionable_1.Actionable));
exports.Unit = Unit;
(function (Unit) {
    var Type;
    (function (Type) {
        Type[Type["WORKER"] = 0] = "WORKER";
        Type[Type["CART"] = 1] = "CART";
    })(Type = Unit.Type || (Unit.Type = {}));
    /**
     * Team constants. The same as the agent ids
     */
    var TEAM;
    (function (TEAM) {
        TEAM[TEAM["A"] = 0] = "A";
        TEAM[TEAM["B"] = 1] = "B";
    })(TEAM = Unit.TEAM || (Unit.TEAM = {}));
})(Unit = exports.Unit || (exports.Unit = {}));
exports.Unit = Unit;
var Cart = /** @class */ (function (_super) {
    __extends(Cart, _super);
    function Cart(x, y, team, configs, idcount) {
        return _super.call(this, x, y, Unit.Type.CART, team, configs, idcount) || this;
    }
    Cart.prototype.getLightUpkeep = function () {
        return this.configs.parameters.LIGHT_UPKEEP.CART;
    };
    Cart.prototype.canMove = function () {
        return this.canAct();
    };
    Cart.prototype.turn = function (game) {
        var cell = game.map.getCellByPos(this.pos);
        var isNight = game.isNight();
        var cooldownMultiplier = isNight ? 2 : 1;
        if (this.currentActions.length === 1) {
            var action = this.currentActions[0];
            if (action instanceof Actions_1.MoveAction) {
                game.moveUnit(action.team, action.unitid, action.direction);
                this.cooldown +=
                    this.configs.parameters.UNIT_ACTION_COOLDOWN.CART *
                        cooldownMultiplier;
            }
            else if (action instanceof Actions_1.TransferAction) {
                game.transferResources(action.team, action.srcID, action.destID, action.resourceType, action.amount);
                this.cooldown +=
                    this.configs.parameters.UNIT_ACTION_COOLDOWN.CART *
                        cooldownMultiplier;
            }
        }
        var endcell = game.map.getCellByPos(this.pos);
        // auto create roads by increasing the cooldown value of the the cell unit is on currently
        if (endcell.getRoad() < this.configs.parameters.MAX_ROAD) {
            endcell.road = Math.min(endcell.road + this.configs.parameters.CART_ROAD_DEVELOPMENT_RATE, this.configs.parameters.MAX_ROAD);
            game.stats.teamStats[this.team].roadsBuilt +=
                this.configs.parameters.CART_ROAD_DEVELOPMENT_RATE;
        }
    };
    return Cart;
}(Unit));
exports.Cart = Cart;
var Worker = /** @class */ (function (_super) {
    __extends(Worker, _super);
    function Worker(x, y, team, configs, idcount) {
        return _super.call(this, x, y, Unit.Type.WORKER, team, configs, idcount) || this;
    }
    Worker.prototype.getLightUpkeep = function () {
        return this.configs.parameters.LIGHT_UPKEEP.WORKER;
    };
    Worker.prototype.canMove = function () {
        return this.canAct();
    };
    Worker.prototype.expendResourcesForCity = function () {
        // use wood, then coal, then uranium for building
        var spentResources = 0;
        for (var _i = 0, _a = ["wood", "coal", "uranium"]; _i < _a.length; _i++) {
            var rtype = _a[_i];
            if (spentResources + this.cargo[rtype] > this.configs.parameters.CITY_BUILD_COST) {
                var rtypeSpent = this.configs.parameters.CITY_BUILD_COST - spentResources;
                this.cargo[rtype] -= rtypeSpent;
                break;
            }
            else {
                spentResources += this.cargo[rtype];
                this.cargo[rtype] = 0;
            }
        }
    };
    Worker.prototype.turn = function (game) {
        var cell = game.map.getCellByPos(this.pos);
        var isNight = game.isNight();
        var cooldownMultiplier = isNight ? 2 : 1;
        if (this.currentActions.length === 1) {
            var action = this.currentActions[0];
            var acted = true;
            if (action instanceof Actions_1.MoveAction) {
                game.moveUnit(action.team, action.unitid, action.direction);
            }
            else if (action instanceof Actions_1.TransferAction) {
                game.transferResources(action.team, action.srcID, action.destID, action.resourceType, action.amount);
            }
            else if (action instanceof Actions_1.SpawnCityAction) {
                game.spawnCityTile(action.team, this.pos.x, this.pos.y);
                this.expendResourcesForCity();
            }
            else if (action instanceof Actions_1.PillageAction) {
                cell.road = Math.max(cell.road - this.configs.parameters.PILLAGE_RATE, this.configs.parameters.MIN_ROAD);
            }
            else {
                acted = false;
            }
            if (acted) {
                this.cooldown +=
                    this.configs.parameters.UNIT_ACTION_COOLDOWN.WORKER *
                        cooldownMultiplier;
            }
        }
    };
    return Worker;
}(Unit));
exports.Worker = Worker;
//# sourceMappingURL=index.js.map