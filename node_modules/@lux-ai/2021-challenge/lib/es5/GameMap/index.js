"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameMap = void 0;
var cell_1 = require("../GameMap/cell");
var Unit_1 = require("../Unit");
var Resource_1 = require("../Resource");
var GameMap = /** @class */ (function () {
    /**
     * Constructor to initialize empty game map with empty cells
     * @param width - width of map
     * @param height - height of map
     */
    function GameMap(configs) {
        this.resources = [];
        this.height = configs.height;
        this.width = configs.width;
        this.map = new Array(this.height);
        for (var y = 0; y < this.height; y++) {
            this.map[y] = new Array(this.width);
            for (var x = 0; x < this.width; x++) {
                // this should be the only time we ever call new Cell(...)
                this.map[y][x] = new cell_1.Cell(x, y, configs);
            }
        }
    }
    // make resources array order determinstic
    GameMap.prototype.sortResourcesDeterministically = function () {
        var val = Math.max(this.width, this.height);
        this.resources.sort(function (a, b) {
            return a.pos.x * val + a.pos.y - (b.pos.x * val + b.pos.y);
        });
    };
    GameMap.prototype.addResource = function (x, y, resourceType, amount) {
        var cell = this.getCell(x, y);
        cell.setResource(resourceType, amount);
        this.resources.push(cell);
        return cell;
    };
    GameMap.prototype.getCellByPos = function (pos) {
        return this.map[pos.y][pos.x];
    };
    GameMap.prototype.getCell = function (x, y) {
        return this.map[y][x];
    };
    GameMap.prototype.getRow = function (y) {
        return this.map[y];
    };
    GameMap.prototype.getAdjacentCells = function (cell) {
        var cells = [];
        // NORTH
        if (cell.pos.y > 0) {
            cells.push(this.getCell(cell.pos.x, cell.pos.y - 1));
        }
        // EAST
        if (cell.pos.x < this.width - 1) {
            cells.push(this.getCell(cell.pos.x + 1, cell.pos.y));
        }
        // SOUTH
        if (cell.pos.y < this.height - 1) {
            cells.push(this.getCell(cell.pos.x, cell.pos.y + 1));
        }
        // WEST
        if (cell.pos.x > 0) {
            cells.push(this.getCell(cell.pos.x - 1, cell.pos.y));
        }
        return cells;
    };
    GameMap.prototype.inMap = function (pos) {
        return !(pos.x < 0 ||
            pos.y < 0 ||
            pos.x >= this.width ||
            pos.y >= this.height);
    };
    GameMap.prototype.toStateObject = function () {
        var obj = [];
        for (var y = 0; y < this.height; y++) {
            obj.push([]);
            for (var x = 0; x < this.width; x++) {
                var cell = this.getCell(x, y);
                var cellData = {
                    road: cell.getRoad(),
                };
                if (cell.resource) {
                    cellData.resource = {
                        type: cell.resource.type,
                        amount: cell.resource.amount,
                    };
                }
                obj[y].push(cellData);
            }
        }
        return obj;
    };
    /**
     * Return printable map string
     */
    GameMap.prototype.getMapString = function () {
        var str = '';
        for (var y = 0; y < this.height; y++) {
            str +=
                this.getRow(y)
                    .map(function (cell) {
                    if (cell.hasUnits()) {
                        if (cell.units.size === 1) {
                            var unitstr_1 = '';
                            cell.units.forEach(function (unit) {
                                var identifier = 'w';
                                if (unit.type === Unit_1.Unit.Type.CART) {
                                    identifier = 'c';
                                }
                                if (unit.team === Unit_1.Unit.TEAM.A) {
                                    unitstr_1 = identifier.cyan;
                                }
                                else {
                                    unitstr_1 = identifier.red;
                                }
                            });
                            return unitstr_1;
                        }
                        else {
                            var size = cell.units.size;
                            var team = cell.units.values().next().value.team;
                            if (team === Unit_1.Unit.TEAM.A) {
                                return ("" + size).cyan;
                            }
                            else {
                                return ("" + size).red;
                            }
                        }
                    }
                    else if (cell.hasResource()) {
                        switch (cell.resource.type) {
                            case Resource_1.Resource.Types.WOOD:
                                return "\u25A9".yellow;
                            case Resource_1.Resource.Types.COAL:
                                return "\u25A9".gray;
                            case Resource_1.Resource.Types.URANIUM:
                                return "\u25A9".magenta;
                        }
                    }
                    else if (cell.isCityTile()) {
                        if (cell.citytile.team === Unit_1.Unit.TEAM.A) {
                            return "\u25A9".cyan;
                        }
                        else {
                            return "\u25A9".red;
                        }
                    }
                    var cd = cell.getRoad();
                    if (cd < 1.1) {
                        return '0';
                    }
                    else if (cd < 2.1) {
                        return 'r'.black.bgYellow;
                    }
                    else {
                        return 'r'.black.bgGreen;
                    }
                })
                    .join(' ') + '\n';
        }
        return str;
    };
    return GameMap;
}());
exports.GameMap = GameMap;
(function (GameMap) {
    var Types;
    (function (Types) {
        Types["EMPTY"] = "empty";
        Types["RANDOM"] = "random";
        Types["DEBUG"] = "debug";
    })(Types = GameMap.Types || (GameMap.Types = {}));
})(GameMap = exports.GameMap || (exports.GameMap = {}));
exports.GameMap = GameMap;
//# sourceMappingURL=index.js.map