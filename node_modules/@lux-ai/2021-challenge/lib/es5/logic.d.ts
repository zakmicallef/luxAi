import { Match, MatchEngine } from 'dimensions-ai';
import { LuxMatchState, SerializedState } from './types';
import { Game } from './Game';
import { KaggleObservation } from './Replay/parseKaggleObs';
export declare class LuxDesignLogic {
    static initialize(match: Match): Promise<void>;
    /**
     * Sends map information formatted as so
     *
     * `rp t points` - the number of research points team `t` has
     *
     * `r resource_type x y amount` - the amount of resource of that type at `(x, y)`
     * ...
     *
     * `u unit_type t unit_id x y cd w c u` - the unit on team `t` with id unit_id of type unit_type at `(x, y)` with cooldown `cd`,
     * and `w` `c` `u` units of wood, coal, uranium
     * ...
     *
     * `c t city_id f lk` - citeam `t`'s city with id city_id and fuel `f` and light upkeep `lk`
     * ...
     *
     * `ct t city_id x y cd` - team `t`'s city tile part of city with id city_id at `(x, y)` with cooldown `cd`
     * ...
     *
     *
     * `ccd x y cd` - road level of cell at (x, y)
     *
     */
    static sendAllAgentsGameInformation(match: Match): Promise<void>;
    static update(match: Match, commands: Array<MatchEngine.Command>): Promise<Match.Status>;
    static debugViewer(game: Game): Promise<void>;
    /**
     * Determine if match is over or not
     * @param state
     */
    static matchOver(match: Match): boolean;
    /**
     * Handle nightfall and update state accordingly
     * @param state
     */
    static handleNight(state: LuxMatchState): void;
    static getResults(match: Match): any;
    /**
     * Reset the match to a starting state and continue from there
     * @param serializedState
     *
     * DOES NOT change constants at all
     */
    static reset(match: Match, serializedState: SerializedState | KaggleObservation): void;
}
