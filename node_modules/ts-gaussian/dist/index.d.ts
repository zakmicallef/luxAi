/**
 * Complementary error function
 * From Numerical Recipes in C 2e p221
 */
export declare function erfc(x: number): number;
/**
 * Inverse complementary error function
 * From Numerical Recipes 3e p265
 */
export declare function ierfc(x: number): number;
/**
 * Models the [Normal](http://en.wikipedia.org/wiki/Normal_distribution) (or Gaussian) distribution.
 */
export declare class Gaussian {
    mean: number;
    variance: number;
    standardDeviation: number;
    constructor(mean: number, variance: number);
    /**
     * probability density function, which describes the probability
     * of a random variable taking on the value _x_
     */
    pdf(x: number): number;
    /**
     * cumulative distribution function, which describes the probability of a
     * random variable falling in the interval (−∞, _x_]
     */
    cdf(x: number): number;
    /**
     * percent point function, the inverse of _cdf_
     */
    ppf(x: number): number;
    /**
     * Product distribution of this and d (scale for constant)
     * @returns the product distribution of this and the given distribution;
     * equivalent to `scale(d)` when d is a constant
     */
    mul(d: number | Gaussian): Gaussian;
    /**
     * Quotient distribution of this and d (scale for constant)
     * @returns the quotient distribution of this and the given distribution; equivalent to `scale(1/d)` when d is a constant
     */
    div(d: number | Gaussian): Gaussian;
    /**
     * Addition of this and d
     * @returns the result of adding this and the given distribution's means and variances
     */
    add(d: Gaussian): Gaussian;
    /**
     * Subtraction of this and d
     * @returns the result of subtracting this and the given distribution's means and variances
     */
    sub(d: Gaussian): Gaussian;
    /**
     * Scale this by constant c
     * @returns the result of scaling this distribution by the given constant
     */
    scale(c: number): Gaussian;
    fromPrecisionMean(precision: number, precisionmean: number): Gaussian;
}
