var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { deepMerge } from '../utils/DeepMerge';
import { genID } from '../utils';
import { deepCopy } from '../utils/DeepCopy';
import { Logger } from '../Logger';
import { Match } from '../Match';
import { Station, BOT_DIR } from '../Station';
import { MissingFilesError } from '../DimensionError';
import { Tournament } from '../Tournament';
import { Plugin } from '../Plugin';
import { existsSync, mkdirSync } from 'fs';
import { AgentClassTypeGuards } from '../utils/TypeGuards';
/**
 * Some standard database type strings
 */
export var DatabaseType;
(function (DatabaseType) {
    /**
     * Represents no database used
     */
    DatabaseType["NONE"] = "none";
    /**
     * Represents mongodb database used
     */
    DatabaseType["MONGO"] = "mongo";
    /**
     * Firestore DB is used
     */
    DatabaseType["FIRESTORE"] = "firestore";
})(DatabaseType || (DatabaseType = {}));
export var StorageType;
(function (StorageType) {
    /**
     * Represents no storage used, all files stored locally on devide
     */
    StorageType["NONE"] = "none";
    /**
     * Represents gcloud storage used
     */
    StorageType["GCLOUD"] = "gcloud";
    /** Using local file system for storage*/
    StorageType["FS"] = "fs-storage";
})(StorageType || (StorageType = {}));
/**
 * The Dimension framework for intiating a {@link Design} to then run instances of a {@link Match} or
 * {@link Tournament} on.
 */
export class Dimension {
    constructor(design, configs = {}) {
        this.design = design;
        /**
         * A map of the matches running in this Dimension
         */
        this.matches = new Map();
        /**
         * A map of the tournaments in this Dimension.
         */
        this.tournaments = new Map();
        /**
         * Logger
         */
        this.log = new Logger();
        /**
         * Stats
         */
        this.statistics = {
            tournamentsCreated: 0,
            matchesCreated: 0,
        };
        /**
         * Dimension configs. Set to defaults
         */
        this.configs = {
            name: '',
            activateStation: true,
            observe: true,
            loggingLevel: Logger.LEVEL.INFO,
            defaultMatchConfigs: {
                secureMode: false,
            },
            secureMode: false,
            backingDatabase: DatabaseType.NONE,
            backingStorage: StorageType.NONE,
            id: 'oLBptg',
            stationConfigs: {},
            createBotDirectories: true,
        };
        /**
         * Indicator of whether cleanup was called already or not
         */
        this.cleaningUp = null;
        // override configs with user provided configs
        this.configs = deepMerge(this.configs, configs);
        // generate ID if not provided
        if (!configs.id) {
            this.id = Dimension.genDimensionID();
        }
        else {
            this.id = configs.id;
        }
        this.log.level = this.configs.loggingLevel;
        if (this.configs.stationConfigs.loggingLevel === undefined) {
            this.configs.stationConfigs.loggingLevel = this.configs.loggingLevel;
        }
        // open up a new station for the current node process if it hasn't been opened yet and there is a dimension that
        // is asking for a station to be initiated
        if (this.configs.activateStation === true && Dimension.Station == null) {
            Dimension.Station = new Station('Station', [], this.configs.stationConfigs);
        }
        // default match log level and design log level is the same as passed into the dimension
        this.configs.defaultMatchConfigs.loggingLevel = this.configs.loggingLevel;
        this.design.setLogLevel(this.configs.loggingLevel);
        // set name
        if (this.configs.name) {
            this.name = this.configs.name;
        }
        else {
            this.name = `dimension_${this.id}`;
        }
        this.log.identifier = `${this.name} Log`;
        // log important messages regarding security
        if (this.configs.secureMode) {
            this.setupSecurity();
        }
        else {
            this.log.warn(`WARNING: Running in non-secure mode. You will not be protected against malicious bots`);
        }
        // setting securemode in dimension config also sets it for default match configs
        this.configs.defaultMatchConfigs.secureMode = this.configs.secureMode;
        // set up cleanup functions
        process.on('exit', () => __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.cleanup();
            }
            catch (err) {
                console.error(err);
            }
            process.exit();
        }));
        process.on('SIGINT', () => __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.cleanup();
            }
            catch (err) {
                console.error(err);
            }
            process.exit();
        }));
        // make the station observe this dimension when this dimension is created
        if (this.configs.observe === true && Dimension.Station != null)
            Dimension.Station.observe(this);
        this.log.info(`Created Dimension - ID: ${this.id}, Name: ${this.name}`);
        this.log.detail('Dimension Configs', this.configs);
        // create bot directories
        if (!existsSync(BOT_DIR) && this.configs.createBotDirectories) {
            mkdirSync(BOT_DIR, { recursive: true });
        }
    }
    /**
     * Create a match with the given files and any optional {@link Match.Configs}. Resolves with the initialized
     * {@link Match} object as specified by the {@link Design} of this {@link Dimension}
     *
     * Rejects if an error occurs.
     *
     * @param files - List of files or objects to use to generate agents and use for a new match
     * @param matchOptions - Options for the created match
     * @param configs - Configurations that are {@link Design} dependent
     */
    createMatch(files, configs) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!files.length) {
                throw new MissingFilesError('No files provided for match');
            }
            // override dimension defaults with provided configs
            let matchConfigs = deepCopy(this.configs.defaultMatchConfigs);
            matchConfigs = deepMerge(matchConfigs, configs);
            // create new match
            let match;
            if (AgentClassTypeGuards.isGenerationMetaData_FilesOnly(files)) {
                match = new Match(this.design, files, matchConfigs, this);
            }
            else {
                match = new Match(this.design, files, matchConfigs, this);
            }
            this.statistics.matchesCreated++;
            // store match into dimension
            this.matches.set(match.id, match);
            // Initialize match and return it
            yield match.initialize();
            return match;
        });
    }
    /**
     * Runs a match with the given files and any optional {@link Match.Configs}. It rejects if an error occurs. Some
     * errors include {@link MatchDestroyedError} which happens when {@link Match.destroy} is called.
     *
     * This also automatically stores matches into the {@link Database} if database is active and configured to save
     *
     * Resolves with the results of the match as specified by the {@link Design} of this {@link Dimension}
     *
     * @param files - List of files or objects to use to generate agents and use for a new match
     * @param matchOptions - Options for the created match
     * @param configs - Configurations that are `Design` dependent. These configs are passed into `Design.initialize`
     * `Design.update` and `Design.storeResults`
     */
    runMatch(files, configs) {
        return __awaiter(this, void 0, void 0, function* () {
            const match = yield this.createMatch(files, configs);
            // Get results
            const results = yield match.run();
            // if database plugin is active and saveMatches is set to true, store match
            if (this.hasDatabase()) {
                if (this.databasePlugin.configs.saveMatches) {
                    this.databasePlugin.storeMatch(match, this.id);
                }
            }
            // Return the results
            return results;
        });
    }
    /**
     * Create a tournament
     *
     * @param files - The initial files to make competitors in this tournament. Can also specify the name and an
     * existingID, which is the playerID. If database is used, this existingID is used to find the assocciated user with
     * this ID.
     *
     * @param configs - Configuration for the tournament
     *
     * @see {@link Tournament} for the different tournament types
     * @returns a Tournament of the specified type
     */
    createTournament(files, configs) {
        const id = Tournament.genTournamentClassID();
        let newTourney;
        if (configs.loggingLevel === undefined) {
            // set default logging level to that of the dimension
            configs.loggingLevel = this.log.level;
        }
        // merge default match configs from dimension
        const dimensionDefaultMatchConfigs = deepCopy(this.configs.defaultMatchConfigs);
        configs = deepMerge({ defaultMatchConfigs: dimensionDefaultMatchConfigs }, configs);
        switch (configs.type) {
            case Tournament.Type.LADDER:
                newTourney = new Tournament.Ladder(this.design, files, configs, id, this);
                break;
            case Tournament.Type.ELIMINATION:
                newTourney = new Tournament.Elimination(this.design, files, configs, id, this);
                break;
        }
        this.statistics.tournamentsCreated++;
        this.tournaments.set(newTourney.id, newTourney);
        return newTourney;
    }
    // TODO give option to directly create a Ladder/Elimination ... tourney with createLadderTournament etc.
    /**
     * Get the station
     */
    getStation() {
        return Dimension.Station;
    }
    /**
     * Removes a match by id. Returns true if removed, false if nothing was removed
     */
    removeMatch(matchID) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.matches.has(matchID)) {
                const match = this.matches.get(matchID);
                yield match.destroy();
                return this.matches.delete(matchID);
            }
            return false;
        });
    }
    /**
     * Sets up necessary security and checks if everything is in place
     */
    setupSecurity() {
        //
    }
    /**
     * Generates a 6 character nanoID string for identifying dimensions
     */
    static genDimensionID() {
        return genID(6);
    }
    /**
     * Uses a particular plugin in the dimensions framework.
     *
     * @param plugin - the plugin
     */
    use(plugin) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (plugin.type) {
                case Plugin.Type.DATABASE:
                    this.log.info('Attaching Database Plugin ' + plugin.name);
                    // set to unknown to tell dimensions that there is some kind of database, we dont what it is yet
                    this.configs.backingDatabase = 'unknown';
                    this.databasePlugin = plugin;
                    yield this.databasePlugin.initialize(this);
                    break;
                case Plugin.Type.STORAGE:
                    this.log.info('Attaching Storage Plugin ' + plugin.name);
                    this.configs.backingStorage = 'unknown;';
                    this.storagePlugin = plugin;
                    yield this.storagePlugin.initialize(this);
                    break;
                default:
                    break;
            }
            yield plugin.manipulate(this);
        });
    }
    /**
     * Returns true if dimension has a database backing it
     */
    hasDatabase() {
        return (this.databasePlugin !== undefined &&
            this.configs.backingDatabase !== DatabaseType.NONE);
    }
    /**
     * Returns true if dimension has a storage plugin backing it
     */
    hasStorage() {
        return (this.storagePlugin && this.configs.backingStorage !== StorageType.NONE);
    }
    /**
     * Cleanup function that cleans up any resources used and related to this dimension. For use right before
     * process exits and during testing.
     */
    cleanup() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cleaningUp) {
                return this.cleaningUp;
            }
            this.log.info('Cleaning up');
            const cleanUpPromises = [];
            cleanUpPromises.push(this.cleanupMatches());
            cleanUpPromises.push(this.cleanupTournaments());
            if (this.getStation()) {
                cleanUpPromises.push(this.getStation().stop());
            }
            this.cleaningUp = Promise.all(cleanUpPromises);
            yield this.cleaningUp;
        });
    }
    cleanupMatches() {
        return __awaiter(this, void 0, void 0, function* () {
            const cleanUpPromises = [];
            this.matches.forEach((match) => {
                cleanUpPromises.push(match.destroy());
            });
            return Promise.all(cleanUpPromises);
        });
    }
    cleanupTournaments() {
        return __awaiter(this, void 0, void 0, function* () {
            const cleanUpPromises = [];
            this.tournaments.forEach((tournament) => {
                cleanUpPromises.push(tournament.destroy());
            });
            return Promise.all(cleanUpPromises);
        });
    }
}
/**
 * The Station associated with this Dimension and current node instance
 */
Dimension.Station = null;
/**
 * Creates a dimension for use to start matches, run tournaments, etc.
 * @param design - the design to use
 * @param configs - optional configurations for the dimension
 */
export function create(design, configs) {
    return new Dimension(design, configs);
}
//# sourceMappingURL=index.js.map