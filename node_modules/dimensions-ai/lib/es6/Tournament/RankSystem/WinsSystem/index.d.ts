import { DeepPartial } from '../../../utils/DeepPartial';
import { RankSystem } from '..';
import { Player } from '../..';
export declare class WinsSystem extends RankSystem<Wins.Configs, Wins.RankState> {
    configs: Wins.Configs;
    constructor(configs: DeepPartial<Wins.Configs>);
    getPoints(wins: number, ties: number, losses: number): number;
    initializeRankState(): Wins.RankState;
    onPlayerUpdate(rankState: Wins.RankState): Wins.RankState;
    updateRanks(rankStates: Array<Wins.RankState>, relativeRanks: Array<number>): Array<Wins.RankState>;
    resetRank(rankState: Wins.RankState): Wins.RankState;
    rankComparator(rankState1: Wins.RankState, rankState2: Wins.RankState): number;
    getRankStatesHeaderString(): string;
    getRankStateString(player: Player, rankState: Wins.RankState, matchesPlayed: number): string;
}
export declare namespace Wins {
    /**
     * The configuration interface for configuring the {@link WINS} ranking system
     */
    interface Configs {
        /** Points given per win in a {@link Match} */
        winValue: number;
        /** Points given per tie in a {@link Match} */
        tieValue: number;
        /** Points given per loss in a {@link Match} */
        lossValue: number;
        /** True if first place is the one with the most points. */
        descending: boolean;
    }
    /** The current rank state of a player */
    interface RankState {
        wins: number;
        ties: number;
        losses: number;
        points: number;
    }
}
