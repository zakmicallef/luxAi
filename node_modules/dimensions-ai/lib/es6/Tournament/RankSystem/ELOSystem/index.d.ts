import { DeepPartial } from '../../../utils/DeepPartial';
import { ELORating } from '../../ELO';
import { RankSystem } from '..';
import { Player } from '../..';
export declare class ELOSystem extends RankSystem<ELO.Configs, ELO.RankState> {
    configs: ELO.Configs;
    private elo;
    constructor(configs: DeepPartial<ELO.Configs>);
    initializeRankState(): ELO.RankState;
    onPlayerUpdate(rankState: ELO.RankState): ELO.RankState;
    updateRanks(rankStates: Array<ELO.RankState>, relativeRanks: Array<number>): Array<ELO.RankState>;
    resetRank(rankState: ELO.RankState): ELO.RankState;
    rankComparator(rankState1: ELO.RankState, rankState2: ELO.RankState): number;
    getRankStatesHeaderString(): string;
    getRankStateString(player: Player, rankState: ELO.RankState, matchesPlayed: number): string;
}
export declare namespace ELO {
    /**
     * The configuration interface for configuring the {@link ELO} ranking system
     */
    interface Configs {
        /**
         * Starting ELO score
         * @default `1000`
         */
        startingScore: number;
        /**
         * The k factor to use for the ranking.
         * @default `32`
         */
        kFactor: number;
    }
    /** The current rank state of a player */
    interface RankState {
        /** The ELO Rating */
        rating: ELORating;
    }
}
