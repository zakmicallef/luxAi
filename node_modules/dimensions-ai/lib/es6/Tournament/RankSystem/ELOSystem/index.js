import { sprintf } from 'sprintf-js';
import { deepMerge } from '../../../utils/DeepMerge';
import { deepCopy } from '../../../utils/DeepCopy';
import { ELOWrapper } from '../../ELO';
import { RankSystem } from '..';
export class ELOSystem extends RankSystem {
    constructor(configs) {
        super();
        this.configs = {
            startingScore: 1000,
            kFactor: 32,
        };
        this.configs = deepMerge(this.configs, deepCopy(configs));
        this.elo = new ELOWrapper(this.configs.kFactor, this.configs.startingScore);
    }
    initializeRankState() {
        return {
            rating: this.elo.createRating(),
        };
    }
    onPlayerUpdate(rankState) {
        return {
            rating: this.elo.createRating(rankState.rating.score),
        };
    }
    updateRanks(rankStates, relativeRanks) {
        const ratings = [];
        rankStates.forEach((rankState) => {
            ratings.push(this.elo.createRating(rankState.rating.score));
        });
        this.elo.rate(ratings, relativeRanks);
        return ratings.map((value) => {
            return { rating: value };
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    resetRank(rankState) {
        return {
            rating: this.elo.createRating(),
        };
    }
    rankComparator(rankState1, rankState2) {
        return rankState2.rating.score - rankState1.rating.score;
    }
    getRankStatesHeaderString() {
        return sprintf(`%-30s | %-15s | %-15s | %-8s`.underline, 'Name', 'ID', 'ELO Score', 'Matches');
    }
    getRankStateString(player, rankState, matchesPlayed) {
        return sprintf(`%-30s`.blue + ` | %-15s | ` + `%-15s`.green + ` | %-8s`, player.tournamentID.name, player.tournamentID.id, rankState.rating.score, matchesPlayed);
    }
}
//# sourceMappingURL=index.js.map