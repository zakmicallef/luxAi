import colors from 'colors';
/**
 * Dimensions Logging Class
 */
export class Logger {
    /**
     * Logger Constructor
     * @param level - The logging level to use
     * @param identifier - an identifier to identify which logger is being called
     */
    constructor(level = Logger.LEVEL.INFO, identifier = 'Log') {
        this.level = level;
        /**
         * Color of the identifier string
         * @default Bold Green
         */
        this.identifierColor = colors.bold.green;
        this.identifier = identifier;
    }
    getIdentifier() {
        return this.identifierColor(this.identifier);
    }
    bar(type = '') {
        return `\n-=-=-=-=-=-=-=-=-=-=-=-| ${type} ${this.getIdentifier()} |-=-=-=-=-=-=-=-=-=-=-=-\n`;
    }
    // important are messages that cannot be removed, they will always display
    importantBar() {
        console.log(this.bar(colors.red('[IMPORTANT]')));
    }
    important(...message) {
        console.log(`${colors.red('[IMPORTANT]')} (${this.identifier}) -`, ...message);
    }
    systemIObar() {
        if (this.level >= Logger.LEVEL.SYSTEM_IO)
            console.log(this.bar(colors.red('[SYSTEM I/O]')));
    }
    systemIO(...message) {
        if (this.level >= Logger.LEVEL.SYSTEM_IO)
            console.log(`${colors.red('[SYSTEM I/O]')} (${this.identifier}) -`, ...message);
    }
    systembar() {
        if (this.level >= Logger.LEVEL.SYSTEM)
            console.log(this.bar(colors.red('[SYSTEM]')));
    }
    system(...message) {
        if (this.level >= Logger.LEVEL.SYSTEM)
            console.log(`${colors.red('[SYSTEM]')} (${this.identifier}) -`, ...message);
    }
    detailbar() {
        if (this.level >= Logger.LEVEL.DETAIL)
            console.log(this.bar(colors.grey('[DETAIL]')));
    }
    detail(...message) {
        if (this.level >= Logger.LEVEL.DETAIL)
            console.log(`${colors.grey('[DETAIL]')} (${this.identifier}) -`, ...message);
    }
    infobar() {
        if (this.level >= Logger.LEVEL.INFO)
            console.log(this.bar(colors.blue('[INFO]')));
    }
    info(...message) {
        if (this.level >= Logger.LEVEL.INFO)
            console.log(`${colors.blue('[INFO]')} (${this.identifier}) -`, ...message);
    }
    warnbar() {
        if (this.level >= Logger.LEVEL.WARN)
            console.log(this.bar(colors.yellow('[WARN]')));
    }
    warn(...message) {
        if (this.level >= Logger.LEVEL.WARN)
            console.log(`${colors.yellow('[WARN]')} (${this.identifier}) -`, ...message);
    }
    errorbar() {
        if (this.level >= Logger.LEVEL.ERROR)
            console.log(this.bar(colors.red('[ERROR]')));
    }
    error(...message) {
        if (this.level >= Logger.LEVEL.ERROR)
            console.log(`${colors.red('[ERROR]')} (${this.identifier}) -`, ...message);
    }
    custom(label, level, ...message) {
        if (this.level >= level) {
            console.log(`${label}`, ...message);
        }
    }
}
(function (Logger) {
    /**
     * Logging Levels where the order of levels are NONE, ERROR, ..., SYSTEM_IO, ALL
     */
    let LEVEL;
    (function (LEVEL) {
        /** No logs */
        LEVEL[LEVEL["NONE"] = 0] = "NONE";
        /** Error logs */
        LEVEL[LEVEL["ERROR"] = 1] = "ERROR";
        /** Warning logs */
        LEVEL[LEVEL["WARN"] = 2] = "WARN";
        /** Info logs */
        LEVEL[LEVEL["INFO"] = 3] = "INFO";
        /** Detail logs. For finer details above INFO and below SYSTEM */
        LEVEL[LEVEL["DETAIL"] = 4] = "DETAIL";
        /** System level logs */
        LEVEL[LEVEL["SYSTEM"] = 5] = "SYSTEM";
        /** System IO logs. All I/O related details */
        LEVEL[LEVEL["SYSTEM_IO"] = 6] = "SYSTEM_IO";
        /** All logs */
        LEVEL[LEVEL["ALL"] = 7] = "ALL";
    })(LEVEL = Logger.LEVEL || (Logger.LEVEL = {}));
})(Logger || (Logger = {}));
//# sourceMappingURL=index.js.map