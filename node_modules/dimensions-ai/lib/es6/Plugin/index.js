/**
 * Abstract Plugin class to be inherited in the development of external tooling to manipulate a {@link Dimension}
 *
 * There are specific {@link Database} plugins which are used for setting up a backing database to the dimension so it
 * can automatically store relevant data such as matches and tournaments and player stats
 */
export class Plugin {
}
import { Database as _Database } from './Database';
/** @ignore */
// import _Database = DatabaseDefault.Database;
import { Storage as _Storage } from './Storage';
// import StorageDefault = require('./Storage');
/** @ignore */
// import _Storage = StorageDefault.Storage;
(function (Plugin) {
    /**
     * Enumeration for plugin types
     */
    let Type;
    (function (Type) {
        /**
         * Plugins that work with database capabilities
         * Includes plugins such as {@link MongoDB}, which handle the storage of match results and user data
         */
        Type["DATABASE"] = "database";
        /**
         * Plugins that work with the file storage capabilities
         * Currently not used
         */
        Type["STORAGE"] = "storage";
        /**
         * Other type, of which we will only run the {@link Plugin.manipulate} function
         */
        Type["OTHER"] = "other";
    })(Type = Plugin.Type || (Plugin.Type = {}));
    // re-export some classes
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Plugin.Database = _Database;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Plugin.Storage = _Storage;
})(Plugin || (Plugin = {}));
//# sourceMappingURL=index.js.map