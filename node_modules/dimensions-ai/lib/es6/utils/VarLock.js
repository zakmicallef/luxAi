var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export default class VarLock {
    /**
     * Creating an instance of this automatically locks it
     */
    constructor() {
        this.lockvar();
    }
    /**
     * First waits for existing lock to release before locking right away again
     */
    lockvar() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.lock) {
                yield this.lock;
            }
            this.lock = new Promise((resolve, reject) => {
                this.promiseRes = resolve;
                this.rejectRes = reject;
            });
        });
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    unlock(data) {
        this.promiseRes(data);
    }
    unlockWithError(err) {
        this.rejectRes(err);
    }
}
//# sourceMappingURL=VarLock.js.map