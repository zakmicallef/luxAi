/**
 * A variant of the LRU cache where this cache stores mappings from keys to file paths. This throws out least recently
 * used items when adding a new file path to cache. Thrown out items are removed from cache and the file it pointed to
 * is deleted
 */
export default class LRUFileCache {
    size: number;
    max: number;
    private cache;
    queueHead: LRUFileCacheNode;
    queueTail: LRUFileCacheNode;
    cachePath: string;
    constructor(max: number, cachePath: string);
    /**
     * Adds key to file path pair to cache and copies file to new location. Does not delete the given file at filepath
     *
     * Automatically throws out least recently used items if not enough space left to
     * fit new file
     *
     * Resolves with path to cached file location
     *
     * @param key - the key pointing to the given file path
     * @param filepath - the file path representing the file to cache
     */
    add(key: string, filepath: string): Promise<string>;
    private getCachedFilePath;
    has(key: string): boolean;
    /**
     * Gets the cached file path associated with the key. Returns undefined if file mapped from key is not cached
     * @param key
     */
    get(key: string): string;
}
declare class LRUFileCacheNode {
    filepath: string;
    filesize: number;
    key: string;
    next: LRUFileCacheNode;
    prev: LRUFileCacheNode;
    constructor(filepath: string, filesize: number, key: string);
}
export {};
