/**
 * API for dimension's matches
 */
import express from 'express';
import { Match } from '../../../../../Match';
declare const router: import("express-serve-static-core").Router;
/**
 * Get match by matchID. Requires a tournament or dimension to be stored.
 *
 * For tournaments, it will get a match only if it's active. Otherwise a database plugin is needed in order to retrieve
 * the match. NOTE that the database plugin will not recover all of the same match data as usually returned from active
 * matches
 *
 * For dimension run match (via {@link Dimension.runMatch}), it is retrievable as long as it has not been destroyed
 */
export declare const getMatch: (req: express.Request<import("express-serve-static-core").ParamsDictionary>, res: express.Response<any>, next: express.NextFunction) => Promise<void>;
/**
 * Pick relevant fields of a match
 */
export declare const pickMatch: (match: Match) => {
    agents: any[];
    name: string;
    id: string;
    configs: Match.Configs;
    creationDate: Date;
    mapAgentIDtoTournamentID: Map<number, import("../../../../..").Tournament.ID>;
    matchStatus: Match.Status;
    finishDate: Date;
    results: any;
    replayFileKey: string;
    replayFile: string;
};
export default router;
