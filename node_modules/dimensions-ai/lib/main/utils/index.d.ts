/**
 * Pick stuff
 * @param obj - object to pick out from
 * @param params - fields to pick out
 */
export declare const pick: <T, K extends keyof T>(obj: T, ...params: K[]) => Pick<T, K>;
/**
 * Generate unique IDs using nanoid
 * @param n - length of id
 */
export declare const genID: (n: number) => string;
export declare const stripFunctions: <T extends {
    [x: string]: any;
}>(object: T) => NoFunctions<T>;
export declare type NoFunctions<T> = T extends object ? T extends Function ? null : {
    [K in keyof T]: NoFunctions<T[K]>;
} : T;
export declare const stripNull: <T extends {
    [x: string]: any;
}>(object: T) => T;
/**
 * Async function that resolves after `ms` milliseconds
 * @param ms - number of milliseconds to sleep for
 */
export declare const sleep: (ms: number) => Promise<void>;
export declare const noop: () => void;
