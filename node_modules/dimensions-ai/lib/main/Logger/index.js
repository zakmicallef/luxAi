"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var colors_1 = __importDefault(require("colors"));
/**
 * Dimensions Logging Class
 */
var Logger = /** @class */ (function () {
    /**
     * Logger Constructor
     * @param level - The logging level to use
     * @param identifier - an identifier to identify which logger is being called
     */
    function Logger(level, identifier) {
        if (level === void 0) { level = Logger.LEVEL.INFO; }
        if (identifier === void 0) { identifier = 'Log'; }
        this.level = level;
        /**
         * Color of the identifier string
         * @default Bold Green
         */
        this.identifierColor = colors_1.default.bold.green;
        this.identifier = identifier;
    }
    Logger.prototype.getIdentifier = function () {
        return this.identifierColor(this.identifier);
    };
    Logger.prototype.bar = function (type) {
        if (type === void 0) { type = ''; }
        return "\n-=-=-=-=-=-=-=-=-=-=-=-| " + type + " " + this.getIdentifier() + " |-=-=-=-=-=-=-=-=-=-=-=-\n";
    };
    // important are messages that cannot be removed, they will always display
    Logger.prototype.importantBar = function () {
        console.log(this.bar(colors_1.default.red('[IMPORTANT]')));
    };
    Logger.prototype.important = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        console.log.apply(console, __spreadArrays([colors_1.default.red('[IMPORTANT]') + " (" + this.identifier + ") -"], message));
    };
    Logger.prototype.systemIObar = function () {
        if (this.level >= Logger.LEVEL.SYSTEM_IO)
            console.log(this.bar(colors_1.default.red('[SYSTEM I/O]')));
    };
    Logger.prototype.systemIO = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        if (this.level >= Logger.LEVEL.SYSTEM_IO)
            console.log.apply(console, __spreadArrays([colors_1.default.red('[SYSTEM I/O]') + " (" + this.identifier + ") -"], message));
    };
    Logger.prototype.systembar = function () {
        if (this.level >= Logger.LEVEL.SYSTEM)
            console.log(this.bar(colors_1.default.red('[SYSTEM]')));
    };
    Logger.prototype.system = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        if (this.level >= Logger.LEVEL.SYSTEM)
            console.log.apply(console, __spreadArrays([colors_1.default.red('[SYSTEM]') + " (" + this.identifier + ") -"], message));
    };
    Logger.prototype.detailbar = function () {
        if (this.level >= Logger.LEVEL.DETAIL)
            console.log(this.bar(colors_1.default.grey('[DETAIL]')));
    };
    Logger.prototype.detail = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        if (this.level >= Logger.LEVEL.DETAIL)
            console.log.apply(console, __spreadArrays([colors_1.default.grey('[DETAIL]') + " (" + this.identifier + ") -"], message));
    };
    Logger.prototype.infobar = function () {
        if (this.level >= Logger.LEVEL.INFO)
            console.log(this.bar(colors_1.default.blue('[INFO]')));
    };
    Logger.prototype.info = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        if (this.level >= Logger.LEVEL.INFO)
            console.log.apply(console, __spreadArrays([colors_1.default.blue('[INFO]') + " (" + this.identifier + ") -"], message));
    };
    Logger.prototype.warnbar = function () {
        if (this.level >= Logger.LEVEL.WARN)
            console.log(this.bar(colors_1.default.yellow('[WARN]')));
    };
    Logger.prototype.warn = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        if (this.level >= Logger.LEVEL.WARN)
            console.log.apply(console, __spreadArrays([colors_1.default.yellow('[WARN]') + " (" + this.identifier + ") -"], message));
    };
    Logger.prototype.errorbar = function () {
        if (this.level >= Logger.LEVEL.ERROR)
            console.log(this.bar(colors_1.default.red('[ERROR]')));
    };
    Logger.prototype.error = function () {
        var message = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            message[_i] = arguments[_i];
        }
        if (this.level >= Logger.LEVEL.ERROR)
            console.log.apply(console, __spreadArrays([colors_1.default.red('[ERROR]') + " (" + this.identifier + ") -"], message));
    };
    Logger.prototype.custom = function (label, level) {
        var message = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            message[_i - 2] = arguments[_i];
        }
        if (this.level >= level) {
            console.log.apply(console, __spreadArrays(["" + label], message));
        }
    };
    return Logger;
}());
exports.Logger = Logger;
(function (Logger) {
    /**
     * Logging Levels where the order of levels are NONE, ERROR, ..., SYSTEM_IO, ALL
     */
    var LEVEL;
    (function (LEVEL) {
        /** No logs */
        LEVEL[LEVEL["NONE"] = 0] = "NONE";
        /** Error logs */
        LEVEL[LEVEL["ERROR"] = 1] = "ERROR";
        /** Warning logs */
        LEVEL[LEVEL["WARN"] = 2] = "WARN";
        /** Info logs */
        LEVEL[LEVEL["INFO"] = 3] = "INFO";
        /** Detail logs. For finer details above INFO and below SYSTEM */
        LEVEL[LEVEL["DETAIL"] = 4] = "DETAIL";
        /** System level logs */
        LEVEL[LEVEL["SYSTEM"] = 5] = "SYSTEM";
        /** System IO logs. All I/O related details */
        LEVEL[LEVEL["SYSTEM_IO"] = 6] = "SYSTEM_IO";
        /** All logs */
        LEVEL[LEVEL["ALL"] = 7] = "ALL";
    })(LEVEL = Logger.LEVEL || (Logger.LEVEL = {}));
})(Logger = exports.Logger || (exports.Logger = {}));
exports.Logger = Logger;
//# sourceMappingURL=index.js.map