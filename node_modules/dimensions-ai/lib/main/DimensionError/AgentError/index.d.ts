/**
 * Any errors thrown by the {@link Agent} class
 */
export declare class AgentError extends Error {
    /**
     * The id of the {@link Agent} that caused the error. If it is -1, then there is no one specific
     * agent that caused the agent error
     */
    agentID: number;
    constructor(m: string, agentID: number);
}
/**
 * Error is thrown when an agents input stream's internal buffer reaches or execeeds the highWaterMark, indicating the
 * agent is not handling input properly or fast enough for smooth match running.
 */
export declare class AgentNotHandlingInputError extends AgentError {
    constructor(m: string, agentID: number);
}
/**
 * Errors thrown during the install step of an {@link Agent}. The install step is when we run the `install.sh` file if
 * provided to run any necessary installation to setup the bot
 */
export declare class AgentInstallError extends AgentError {
    constructor(m: string, agentID: number);
}
/**
 * An error thrown when an Agent's install step times out
 */
export declare class AgentInstallTimeoutError extends AgentInstallError {
    constructor(m: string, agentID: number);
}
/**
 * Errors thrown during the compile step of an {@link Agent}. The compile step is when we run something such as
 * `javac Bot.java`.
 */
export declare class AgentCompileError extends AgentError {
    constructor(m: string, agentID: number);
}
/**
 * An error thrown when an Agent's compile step times out
 */
export declare class AgentCompileTimeoutError extends AgentCompileError {
    constructor(m: string, agentID: number);
}
/**
 * An error thrown when an Agent is supplied with an invalid file
 */
export declare class AgentFileError extends AgentError {
    constructor(m: string, agentID: number);
}
/**
 * An error thrown when an Agent is supplied with an invalid file
 */
export declare class AgentDirectoryError extends AgentError {
    constructor(m: string, agentID: number);
}
/**
 * An error thrown when an id is not provided to an Agent in the constructor
 */
export declare class AgentMissingIDError extends AgentError {
    constructor(m: string, agentID: number);
}
