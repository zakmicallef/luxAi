/**
 * @class DimensionError
 * Simple, standard errors reported by the Dimension framework that don't stop the process
 */
export declare class DimensionError extends Error {
    constructor(m: string);
}
/**
 * @class MatchWarn
 * Standard Match Warnings that do not stop a game, but signal to user of some kind of warning or error that
 * occured as a result
 */
export declare class MatchWarn extends Error {
    constructor(m: string);
}
/**
 * @class FatalError
 * @classdesc A generic fatal error that caused the Dimension framework to break. When thrown, this should stop the
 * process
 */
export declare class FatalError extends Error {
    constructor(m: string);
}
/**
 * Error thrown whenever a set of files is required but is found to be missing
 */
export declare class MissingFilesError extends FatalError {
    constructor(m: string);
}
/**
 * An error thrown whenever something being used is not supported at the moment;
 */
export declare class NotSupportedError extends FatalError {
    constructor(m: string);
}
/**
 * Errors thrown that are related to the security of the dimension
 */
export declare class SecurityError extends Error {
    constructor(m: string);
}
export * from './AgentError';
export * from './MatchError';
export * from './TournamentError';
export * from './DatabaseError';
