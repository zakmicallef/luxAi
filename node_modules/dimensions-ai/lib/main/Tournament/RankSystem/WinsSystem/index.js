"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sprintf_js_1 = require("sprintf-js");
var DeepMerge_1 = require("../../../utils/DeepMerge");
var DeepCopy_1 = require("../../../utils/DeepCopy");
var __1 = require("..");
var DimensionError_1 = require("../../../DimensionError");
var WinsSystem = /** @class */ (function (_super) {
    __extends(WinsSystem, _super);
    function WinsSystem(configs) {
        var _this = _super.call(this) || this;
        _this.configs = {
            winValue: 3,
            tieValue: 1,
            lossValue: 0,
            descending: true,
        };
        _this.configs = DeepMerge_1.deepMerge(_this.configs, DeepCopy_1.deepCopy(configs));
        return _this;
    }
    WinsSystem.prototype.getPoints = function (wins, ties, losses) {
        return (wins * this.configs.winValue +
            ties * this.configs.tieValue +
            losses * this.configs.lossValue);
    };
    WinsSystem.prototype.initializeRankState = function () {
        return {
            wins: 0,
            losses: 0,
            ties: 0,
            points: this.getPoints(0, 0, 0),
        };
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    WinsSystem.prototype.onPlayerUpdate = function (rankState) {
        return {
            wins: 0,
            losses: 0,
            ties: 0,
            points: this.getPoints(0, 0, 0),
        };
    };
    WinsSystem.prototype.updateRanks = function (rankStates, relativeRanks) {
        var _this = this;
        if (relativeRanks.length > 2 || rankStates.length > 2) {
            throw new DimensionError_1.FatalError('WinsSystem only supports 2 agent matches');
        }
        if (relativeRanks[0] === relativeRanks[1]) {
            return rankStates.map(function (state) {
                return {
                    wins: state.wins,
                    ties: state.ties + 1,
                    losses: state.losses,
                    points: _this.getPoints(state.wins, state.ties + 1, state.losses),
                };
            });
        }
        else {
            var winningInd = 0;
            var losingInd = 1;
            if (relativeRanks[0] > relativeRanks[1]) {
                // if [1] won
                winningInd = 1;
                losingInd = 0;
            }
            return [
                {
                    wins: rankStates[winningInd].wins + 1,
                    ties: rankStates[winningInd].ties,
                    losses: rankStates[winningInd].losses,
                    points: this.getPoints(rankStates[winningInd].wins + 1, rankStates[winningInd].ties, rankStates[winningInd].losses),
                },
                {
                    wins: rankStates[losingInd].wins,
                    ties: rankStates[losingInd].ties,
                    losses: rankStates[losingInd].losses + 1,
                    points: this.getPoints(rankStates[losingInd].wins, rankStates[losingInd].ties, rankStates[losingInd].losses + 1),
                },
            ];
        }
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    WinsSystem.prototype.resetRank = function (rankState) {
        return {
            wins: 0,
            ties: 0,
            losses: 0,
            points: this.getPoints(0, 0, 0),
        };
    };
    WinsSystem.prototype.rankComparator = function (rankState1, rankState2) {
        return this.configs.descending
            ? rankState2.points - rankState1.points
            : rankState1.points - rankState2.points;
    };
    WinsSystem.prototype.getRankStatesHeaderString = function () {
        return sprintf_js_1.sprintf("%-30s | %-14s | %-5s | %-5s | %-5s | %8s | %-8s".underline, 'Name', 'ID', 'W', 'T', 'L', 'Points', 'Matches');
    };
    WinsSystem.prototype.getRankStateString = function (player, rankState, matchesPlayed) {
        return sprintf_js_1.sprintf("%-30s".blue +
            " | %-14s | %-5s | %-5s | %-5s | " +
            "%-8s".green +
            " | %-8s", player.tournamentID.name, player.tournamentID.id, rankState.wins, rankState.ties, rankState.losses, rankState.points, matchesPlayed);
    };
    return WinsSystem;
}(__1.RankSystem));
exports.WinsSystem = WinsSystem;
//# sourceMappingURL=index.js.map