"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var DeepMerge_1 = require("../../utils/DeepMerge");
var DimensionError_1 = require("../../DimensionError");
/**
 * The Elimination Tournament Class. Runs a single-elimination tournament.
 *
 * Meant for single instance use only
 */
var Elimination = /** @class */ (function (_super) {
    __extends(Elimination, _super);
    function Elimination(design, files, tournamentConfigs, id, dimension) {
        var _this = _super.call(this, design, id, tournamentConfigs, dimension) || this;
        _this.configs = {
            defaultMatchConfigs: {},
            type: __1.Tournament.Type.ELIMINATION,
            rankSystem: null,
            rankSystemConfigs: null,
            tournamentConfigs: {
                times: 1,
                storePastResults: true,
                lives: 1,
                seeding: null,
            },
            resultHandler: null,
            agentsPerMatch: [2],
            consoleDisplay: true,
            id: 'z3Ap49',
        };
        _this.state = {
            playerStats: new Map(),
            statistics: {
                totalMatches: 0,
            },
            currentRound: null,
            results: [],
            resultsMap: new Map(),
        };
        _this.matchHashes = [];
        _this.type = __1.Tournament.Type.ELIMINATION;
        _this.shouldStop = false;
        if (tournamentConfigs.consoleDisplay) {
            _this.configs.consoleDisplay = tournamentConfigs.consoleDisplay;
        }
        _this.configs = DeepMerge_1.deepMerge(_this.configs, tournamentConfigs, true);
        if (typeof _this.configs.rankSystem === 'string') {
            switch (tournamentConfigs.rankSystem) {
                case __1.Tournament.RankSystemTypes.WINS: {
                    // set default rank system configs
                    var winsConfigs = {
                        winValue: 3,
                        lossValue: 0,
                        tieValue: 0,
                        descending: true,
                    };
                    if (_this.configs.rankSystemConfigs === null) {
                        _this.configs.rankSystemConfigs = winsConfigs;
                    }
                    break;
                }
                default:
                    throw new DimensionError_1.NotSupportedError('We currently do not support this rank system for elimination tournaments');
            }
        }
        else {
            throw new DimensionError_1.NotSupportedError("We do not support custom rank systems for elimination tournaments. Please pass in 'wins' or Tournament.RankSystemTypes.WINS instead");
        }
        // add all players
        files.forEach(function (file) {
            _this.addplayer(file);
        });
        return _this;
    }
    /**
     * Get the current tournament configs
     */
    Elimination.prototype.getConfigs = function () {
        return this.configs;
    };
    /**
     * Set configs to use. Merges the provided configurations and overwrites provided fields with what is provided
     * @param configs - new tournament configs to update with
     */
    Elimination.prototype.setConfigs = function (configs) {
        if (configs === void 0) { configs = {}; }
        this.configs = DeepMerge_1.deepMerge(this.configs, configs, true);
    };
    /**
     * Gets the rankings of the tournament. This will return the tournament rankings in the elimination tournament
     */
    Elimination.prototype.getRankings = function () {
        var ranks = Array.from(this.state.playerStats).sort(function (a, b) { return a[1].rank - b[1].rank; });
        return ranks.map(function (a) { return a[1]; });
    };
    /**
     * Stops the tournament if it's running
     */
    Elimination.prototype.stop = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.status !== __1.Tournament.Status.RUNNING) {
                reject(new DimensionError_1.TournamentError("Can't stop a tournament that isn't running"));
            }
            _this.log.info('Stopping Tournament...');
            _this.status = __1.Tournament.Status.STOPPED;
            _this.resumePromise = new Promise(function (resumeResolve) {
                _this.resumeResolver = resumeResolve;
            });
            _this.shouldStop = true;
            _this.resolveStopPromise = resolve;
        });
    };
    /**
     * Reesumes the tournament if it's stopped
     */
    Elimination.prototype.resume = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.status !== __1.Tournament.Status.STOPPED) {
                    throw new DimensionError_1.TournamentError("Can't resume a tournament that isn't stopped");
                }
                this.log.info('Resuming Tournament...');
                this.status = __1.Tournament.Status.RUNNING;
                this.resumeResolver();
                return [2 /*return*/];
            });
        });
    };
    /**
     * Runs the tournament to completion. Resolves with {@link Elimination.State} once the tournament is finished
     * @param configs - tournament configurations to use
     */
    Elimination.prototype.run = function (configs) {
        return __awaiter(this, void 0, void 0, function () {
            var queuedMatchInfo, matchHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.configs = DeepMerge_1.deepMerge(this.configs, configs, true);
                        this.initialize();
                        this.status = __1.Tournament.Status.RUNNING;
                        _a.label = 1;
                    case 1:
                        if (!this.matchQueue.length) return [3 /*break*/, 5];
                        if (!this.shouldStop) return [3 /*break*/, 3];
                        this.log.info('Stopped Tournament');
                        this.resolveStopPromise();
                        // we wait for the resume function to resolve the resumePromise to continue the loop
                        return [4 /*yield*/, this.resumePromise];
                    case 2:
                        // we wait for the resume function to resolve the resumePromise to continue the loop
                        _a.sent();
                        this.log.info('Resumed Tournament');
                        this.shouldStop = false;
                        _a.label = 3;
                    case 3:
                        queuedMatchInfo = this.matchQueue.shift();
                        matchHash = this.matchHashes.shift();
                        return [4 /*yield*/, this.handleMatch(queuedMatchInfo, matchHash)];
                    case 4:
                        _a.sent();
                        if (this.state.currentRound === 2) {
                            return [3 /*break*/, 5];
                        }
                        if (this.matchQueue.length === 0) {
                            // once a round is done, perform the next round
                            this.generateRound();
                        }
                        return [3 /*break*/, 1];
                    case 5:
                        this.status = __1.Tournament.Status.FINISHED;
                        return [2 /*return*/, this.state];
                }
            });
        });
    };
    /**
     * Handles a match and updates stats appropriately
     * @param matchInfo - The match to run
     */
    Elimination.prototype.handleMatch = function (queuedMatchInfo, matchHash) {
        return __awaiter(this, void 0, void 0, function () {
            var matchInfo, winner_1, winner_2, matchRes, res, rankSystemConfigs, parsedRes, p0ID, p1ID, winningTournamentID, losingTournamentID, winner, loser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMatchInfoFromQueuedMatch(queuedMatchInfo)];
                    case 1:
                        matchInfo = _a.sent();
                        if (matchInfo.length != 2) {
                            throw new DimensionError_1.FatalError("This shouldn't happen, tried to run a match with player count not equal to 2 in an elimination tournament");
                        }
                        // deal with case when one is a null, likely meaning a competitor has a bye
                        if (matchInfo[0] == null) {
                            winner_1 = matchInfo[1];
                            // store result into with matchHash key
                            this.state.resultsMap.set(matchHash, { winner: winner_1, loser: null });
                            return [2 /*return*/];
                        }
                        else if (matchInfo[1] == null) {
                            winner_2 = matchInfo[0];
                            // store result into with matchHash key
                            this.state.resultsMap.set(matchHash, { winner: winner_2, loser: null });
                            return [2 /*return*/];
                        }
                        this.log.detail('Running match - Competitors: ', matchInfo.map(function (player) {
                            return player.tournamentID.name;
                        }));
                        return [4 /*yield*/, this.runMatch(matchInfo)];
                    case 2:
                        matchRes = _a.sent();
                        res = this.configs.resultHandler(matchRes.results);
                        // store past results
                        if (this.configs.tournamentConfigs.storePastResults) {
                            if (!(this.dimension.hasDatabase() &&
                                this.dimension.databasePlugin.configs.saveTournamentMatches)) {
                                // if we have don't have a database that is set to actively store tournament matches we store locally
                                this.state.results.push(res);
                            }
                        }
                        this.state.statistics.totalMatches++;
                        rankSystemConfigs = this.configs
                            .rankSystemConfigs;
                        parsedRes = {};
                        p0ID = matchInfo[0].tournamentID.id;
                        p1ID = matchInfo[1].tournamentID.id;
                        parsedRes[p0ID] = 0;
                        parsedRes[p1ID] = 0;
                        res.ranks.sort(function (a, b) { return a.rank - b.rank; });
                        if (res.ranks[0].rank === res.ranks[1].rank) {
                            res.ranks.forEach(function (info) {
                                var tournamentID = matchRes.match.mapAgentIDtoTournamentID.get(info.agentID);
                                parsedRes[tournamentID.id] += rankSystemConfigs.tieValue;
                            });
                        }
                        else {
                            winningTournamentID = matchRes.match.mapAgentIDtoTournamentID.get(res.ranks[0].agentID);
                            losingTournamentID = matchRes.match.mapAgentIDtoTournamentID.get(res.ranks[1].agentID);
                            parsedRes[winningTournamentID.id] += rankSystemConfigs.winValue;
                            parsedRes[losingTournamentID.id] += rankSystemConfigs.lossValue;
                        }
                        winner = this.state.playerStats.get(p0ID);
                        loser = this.state.playerStats.get(p1ID);
                        if (parsedRes[p0ID] < parsedRes[p1ID]) {
                            winner = this.state.playerStats.get(p1ID);
                            loser = this.state.playerStats.get(p0ID);
                        }
                        else if (parsedRes[p0ID] === parsedRes[p1ID]) {
                            if (Math.random() > 0.5) {
                                winner = this.state.playerStats.get(p1ID);
                                loser = this.state.playerStats.get(p0ID);
                            }
                        }
                        // update stats
                        winner.wins++;
                        winner.matchesPlayed++;
                        loser.losses++;
                        loser.matchesPlayed++;
                        loser.rank = this.state.currentRound;
                        // store result into with matchHash key
                        this.state.resultsMap.set(matchHash, {
                            winner: winner.player,
                            loser: loser.player,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Elimination.prototype.initialize = function () {
        var _this = this;
        this.state.playerStats = new Map();
        this.state.results = [];
        switch (this.configs.rankSystem) {
            case __1.Tournament.RankSystemTypes.WINS: {
                // set up the seeding array and fill it up with null to fill up all empty spots
                var seeding_1 = this.configs.tournamentConfigs.seeding;
                if (seeding_1 == null)
                    seeding_1 = [];
                if (seeding_1.length > this.competitors.size) {
                    throw new DimensionError_1.TournamentError("Seeds provided cannot be greater than the number of competitors");
                }
                for (var i = 0; i < this.competitors.size - seeding_1.length; i++) {
                    seeding_1.push(null);
                }
                // find the leftover seeds that are not used
                var leftOverSeeds = new Set();
                for (var i = 0; i < this.competitors.size; i++) {
                    leftOverSeeds.add(i + 1);
                }
                for (var i = 0; i < seeding_1.length; i++) {
                    if (seeding_1[i] != null) {
                        if (leftOverSeeds.has(seeding_1[i])) {
                            leftOverSeeds.delete(seeding_1[i]);
                        }
                        else {
                            throw new DimensionError_1.TournamentError("Duplicate seeds are not allowed. There are duplicate seeds of " + seeding_1[i]);
                        }
                    }
                }
                var leftOverSeedsArr_1 = Array.from(leftOverSeeds);
                leftOverSeedsArr_1 = this.shuffle(leftOverSeedsArr_1);
                // setup the stats
                this.competitors.forEach(function (player, index) {
                    var seed = seeding_1[index];
                    var playerStat = {
                        player: player,
                        wins: 0,
                        losses: 0,
                        matchesPlayed: 0,
                        seed: seed != null ? seed : leftOverSeedsArr_1.shift(),
                        rank: 1,
                    };
                    _this.state.playerStats.set(player.tournamentID.id, playerStat);
                });
                break;
            }
        }
        var pow = Math.ceil(Math.log2(this.competitors.size));
        var round = Math.pow(2, pow);
        this.state.currentRound = round;
        // generate rounds to play
        this.generateFirstRounds();
        this.status = __1.Tournament.Status.INITIALIZED;
    };
    Elimination.prototype.generateFirstRounds = function () {
        // get players in order of seed
        var round = this.state.currentRound;
        var seededArr = Array.from(this.state.playerStats).sort(function (a, b) { return a[1].seed - b[1].seed; });
        // 1 goes against round, 2 goes against round - 1...
        for (var i = 0; i < round / 2; i++) {
            var p1 = seededArr[i][1].player;
            var oseed = round - (i + 1);
            var p2 = null; // a null is a bye
            if (seededArr.length > oseed) {
                p2 = seededArr[oseed][1].player;
            }
            this.matchQueue.push([p1.tournamentID.id, p2.tournamentID.id]);
            // hashes are of the form `betterseed,worseseed`, which has a 1-1 bijection with the match that should be played
            // in a elimination tournament. e.g 8,9 is a matchup that can happen is during the round of (8 + 9 - 1) = 16
            this.matchHashes.push(i + 1 + "," + (oseed + 1));
        }
    };
    Elimination.prototype.generateRound = function () {
        var oldRound = this.state.currentRound;
        var nextRound = Math.floor(oldRound / 2);
        // generate new hashes
        var hashes = [];
        for (var i = 0; i < nextRound / 2; i++) {
            var oseed = nextRound - (i + 1);
            hashes.push([i + 1, oseed + 1]);
        }
        // for each hash is a new match to queue up, find the winners from the previous rounds
        for (var i = 0; i < hashes.length; i++) {
            var hash = hashes[i];
            // we can generate the match right before this one in the winners bracket through simple arithmetic
            // and knowing that each hash[i] represents the better seed as it is in the next round
            var oldOpponent1 = oldRound - hash[0] + 1;
            var res1 = this.state.resultsMap.get(hash[0] + "," + oldOpponent1);
            var p1 = res1.winner;
            var oldOpponent2 = oldRound - hash[1] + 1;
            var res2 = this.state.resultsMap.get(hash[1] + "," + oldOpponent2);
            var p2 = res2.winner;
            this.matchHashes.push(hash[0] + "," + hash[1]);
            this.matchQueue.push([p1.tournamentID.id, p2.tournamentID.id]);
        }
        this.state.currentRound = nextRound;
    };
    /**
     * Performs a Fisher Yates Shuffle
     * @param arr - the array to shuffle
     */
    Elimination.prototype.shuffle = function (arr) {
        for (var i = arr.length - 1; i >= 1; i--) {
            var j = Math.floor(Math.random() * i);
            var tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
        }
        return arr;
    };
    Elimination.prototype.internalAddPlayer = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.status === __1.Tournament.Status.INITIALIZED ||
                    this.status === __1.Tournament.Status.RUNNING)
                    throw new DimensionError_1.TournamentError('You are not allowed to add a player during the middle or after initialization of elimination tournaments');
                return [2 /*return*/];
            });
        });
    };
    Elimination.prototype.updatePlayer = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new DimensionError_1.TournamentError('You are not allowed to update a player during elimination tournaments');
            });
        });
    };
    return Elimination;
}(__1.Tournament));
exports.Elimination = Elimination;
//# sourceMappingURL=index.js.map