"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var DeepMerge_1 = require("../utils/DeepMerge");
var utils_1 = require("../utils");
var DeepCopy_1 = require("../utils/DeepCopy");
var Logger_1 = require("../Logger");
var Match_1 = require("../Match");
var Station_1 = require("../Station");
var DimensionError_1 = require("../DimensionError");
var Tournament_1 = require("../Tournament");
var Plugin_1 = require("../Plugin");
var fs_1 = require("fs");
var TypeGuards_1 = require("../utils/TypeGuards");
/**
 * Some standard database type strings
 */
var DatabaseType;
(function (DatabaseType) {
    /**
     * Represents no database used
     */
    DatabaseType["NONE"] = "none";
    /**
     * Represents mongodb database used
     */
    DatabaseType["MONGO"] = "mongo";
    /**
     * Firestore DB is used
     */
    DatabaseType["FIRESTORE"] = "firestore";
})(DatabaseType = exports.DatabaseType || (exports.DatabaseType = {}));
var StorageType;
(function (StorageType) {
    /**
     * Represents no storage used, all files stored locally on devide
     */
    StorageType["NONE"] = "none";
    /**
     * Represents gcloud storage used
     */
    StorageType["GCLOUD"] = "gcloud";
    /** Using local file system for storage*/
    StorageType["FS"] = "fs-storage";
})(StorageType = exports.StorageType || (exports.StorageType = {}));
/**
 * The Dimension framework for intiating a {@link Design} to then run instances of a {@link Match} or
 * {@link Tournament} on.
 */
var Dimension = /** @class */ (function () {
    function Dimension(design, configs) {
        var _this = this;
        if (configs === void 0) { configs = {}; }
        this.design = design;
        /**
         * A map of the matches running in this Dimension
         */
        this.matches = new Map();
        /**
         * A map of the tournaments in this Dimension.
         */
        this.tournaments = new Map();
        /**
         * Logger
         */
        this.log = new Logger_1.Logger();
        /**
         * Stats
         */
        this.statistics = {
            tournamentsCreated: 0,
            matchesCreated: 0,
        };
        /**
         * Dimension configs. Set to defaults
         */
        this.configs = {
            name: '',
            activateStation: true,
            observe: true,
            loggingLevel: Logger_1.Logger.LEVEL.INFO,
            defaultMatchConfigs: {
                secureMode: false,
            },
            secureMode: false,
            backingDatabase: DatabaseType.NONE,
            backingStorage: StorageType.NONE,
            id: 'oLBptg',
            stationConfigs: {},
            createBotDirectories: true,
        };
        /**
         * Indicator of whether cleanup was called already or not
         */
        this.cleaningUp = null;
        // override configs with user provided configs
        this.configs = DeepMerge_1.deepMerge(this.configs, configs);
        // generate ID if not provided
        if (!configs.id) {
            this.id = Dimension.genDimensionID();
        }
        else {
            this.id = configs.id;
        }
        this.log.level = this.configs.loggingLevel;
        if (this.configs.stationConfigs.loggingLevel === undefined) {
            this.configs.stationConfigs.loggingLevel = this.configs.loggingLevel;
        }
        // open up a new station for the current node process if it hasn't been opened yet and there is a dimension that
        // is asking for a station to be initiated
        if (this.configs.activateStation === true && Dimension.Station == null) {
            Dimension.Station = new Station_1.Station('Station', [], this.configs.stationConfigs);
        }
        // default match log level and design log level is the same as passed into the dimension
        this.configs.defaultMatchConfigs.loggingLevel = this.configs.loggingLevel;
        this.design.setLogLevel(this.configs.loggingLevel);
        // set name
        if (this.configs.name) {
            this.name = this.configs.name;
        }
        else {
            this.name = "dimension_" + this.id;
        }
        this.log.identifier = this.name + " Log";
        // log important messages regarding security
        if (this.configs.secureMode) {
            this.setupSecurity();
        }
        else {
            this.log.warn("WARNING: Running in non-secure mode. You will not be protected against malicious bots");
        }
        // setting securemode in dimension config also sets it for default match configs
        this.configs.defaultMatchConfigs.secureMode = this.configs.secureMode;
        // set up cleanup functions
        process.on('exit', function () { return __awaiter(_this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.cleanup()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        console.error(err_1);
                        return [3 /*break*/, 3];
                    case 3:
                        process.exit();
                        return [2 /*return*/];
                }
            });
        }); });
        process.on('SIGINT', function () { return __awaiter(_this, void 0, void 0, function () {
            var err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.cleanup()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        err_2 = _a.sent();
                        console.error(err_2);
                        return [3 /*break*/, 3];
                    case 3:
                        process.exit();
                        return [2 /*return*/];
                }
            });
        }); });
        // make the station observe this dimension when this dimension is created
        if (this.configs.observe === true && Dimension.Station != null)
            Dimension.Station.observe(this);
        this.log.info("Created Dimension - ID: " + this.id + ", Name: " + this.name);
        this.log.detail('Dimension Configs', this.configs);
        // create bot directories
        if (!fs_1.existsSync(Station_1.BOT_DIR) && this.configs.createBotDirectories) {
            fs_1.mkdirSync(Station_1.BOT_DIR, { recursive: true });
        }
    }
    /**
     * Create a match with the given files and any optional {@link Match.Configs}. Resolves with the initialized
     * {@link Match} object as specified by the {@link Design} of this {@link Dimension}
     *
     * Rejects if an error occurs.
     *
     * @param files - List of files or objects to use to generate agents and use for a new match
     * @param matchOptions - Options for the created match
     * @param configs - Configurations that are {@link Design} dependent
     */
    Dimension.prototype.createMatch = function (files, configs) {
        return __awaiter(this, void 0, void 0, function () {
            var matchConfigs, match;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!files.length) {
                            throw new DimensionError_1.MissingFilesError('No files provided for match');
                        }
                        matchConfigs = DeepCopy_1.deepCopy(this.configs.defaultMatchConfigs);
                        matchConfigs = DeepMerge_1.deepMerge(matchConfigs, configs);
                        if (TypeGuards_1.AgentClassTypeGuards.isGenerationMetaData_FilesOnly(files)) {
                            match = new Match_1.Match(this.design, files, matchConfigs, this);
                        }
                        else {
                            match = new Match_1.Match(this.design, files, matchConfigs, this);
                        }
                        this.statistics.matchesCreated++;
                        // store match into dimension
                        this.matches.set(match.id, match);
                        // Initialize match and return it
                        return [4 /*yield*/, match.initialize()];
                    case 1:
                        // Initialize match and return it
                        _a.sent();
                        return [2 /*return*/, match];
                }
            });
        });
    };
    /**
     * Runs a match with the given files and any optional {@link Match.Configs}. It rejects if an error occurs. Some
     * errors include {@link MatchDestroyedError} which happens when {@link Match.destroy} is called.
     *
     * This also automatically stores matches into the {@link Database} if database is active and configured to save
     *
     * Resolves with the results of the match as specified by the {@link Design} of this {@link Dimension}
     *
     * @param files - List of files or objects to use to generate agents and use for a new match
     * @param matchOptions - Options for the created match
     * @param configs - Configurations that are `Design` dependent. These configs are passed into `Design.initialize`
     * `Design.update` and `Design.storeResults`
     */
    Dimension.prototype.runMatch = function (files, configs) {
        return __awaiter(this, void 0, void 0, function () {
            var match, results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createMatch(files, configs)];
                    case 1:
                        match = _a.sent();
                        return [4 /*yield*/, match.run()];
                    case 2:
                        results = _a.sent();
                        // if database plugin is active and saveMatches is set to true, store match
                        if (this.hasDatabase()) {
                            if (this.databasePlugin.configs.saveMatches) {
                                this.databasePlugin.storeMatch(match, this.id);
                            }
                        }
                        // Return the results
                        return [2 /*return*/, results];
                }
            });
        });
    };
    /**
     * Create a tournament
     *
     * @param files - The initial files to make competitors in this tournament. Can also specify the name and an
     * existingID, which is the playerID. If database is used, this existingID is used to find the assocciated user with
     * this ID.
     *
     * @param configs - Configuration for the tournament
     *
     * @see {@link Tournament} for the different tournament types
     * @returns a Tournament of the specified type
     */
    Dimension.prototype.createTournament = function (files, configs) {
        var id = Tournament_1.Tournament.genTournamentClassID();
        var newTourney;
        if (configs.loggingLevel === undefined) {
            // set default logging level to that of the dimension
            configs.loggingLevel = this.log.level;
        }
        // merge default match configs from dimension
        var dimensionDefaultMatchConfigs = DeepCopy_1.deepCopy(this.configs.defaultMatchConfigs);
        configs = DeepMerge_1.deepMerge({ defaultMatchConfigs: dimensionDefaultMatchConfigs }, configs);
        switch (configs.type) {
            case Tournament_1.Tournament.Type.LADDER:
                newTourney = new Tournament_1.Tournament.Ladder(this.design, files, configs, id, this);
                break;
            case Tournament_1.Tournament.Type.ELIMINATION:
                newTourney = new Tournament_1.Tournament.Elimination(this.design, files, configs, id, this);
                break;
        }
        this.statistics.tournamentsCreated++;
        this.tournaments.set(newTourney.id, newTourney);
        return newTourney;
    };
    // TODO give option to directly create a Ladder/Elimination ... tourney with createLadderTournament etc.
    /**
     * Get the station
     */
    Dimension.prototype.getStation = function () {
        return Dimension.Station;
    };
    /**
     * Removes a match by id. Returns true if removed, false if nothing was removed
     */
    Dimension.prototype.removeMatch = function (matchID) {
        return __awaiter(this, void 0, void 0, function () {
            var match;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.matches.has(matchID)) return [3 /*break*/, 2];
                        match = this.matches.get(matchID);
                        return [4 /*yield*/, match.destroy()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.matches.delete(matchID)];
                    case 2: return [2 /*return*/, false];
                }
            });
        });
    };
    /**
     * Sets up necessary security and checks if everything is in place
     */
    Dimension.prototype.setupSecurity = function () {
        //
    };
    /**
     * Generates a 6 character nanoID string for identifying dimensions
     */
    Dimension.genDimensionID = function () {
        return utils_1.genID(6);
    };
    /**
     * Uses a particular plugin in the dimensions framework.
     *
     * @param plugin - the plugin
     */
    Dimension.prototype.use = function (plugin) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = plugin.type;
                        switch (_a) {
                            case Plugin_1.Plugin.Type.DATABASE: return [3 /*break*/, 1];
                            case Plugin_1.Plugin.Type.STORAGE: return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 5];
                    case 1:
                        this.log.info('Attaching Database Plugin ' + plugin.name);
                        // set to unknown to tell dimensions that there is some kind of database, we dont what it is yet
                        this.configs.backingDatabase = 'unknown';
                        this.databasePlugin = plugin;
                        return [4 /*yield*/, this.databasePlugin.initialize(this)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 3:
                        this.log.info('Attaching Storage Plugin ' + plugin.name);
                        this.configs.backingStorage = 'unknown;';
                        this.storagePlugin = plugin;
                        return [4 /*yield*/, this.storagePlugin.initialize(this)];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5: return [3 /*break*/, 6];
                    case 6: return [4 /*yield*/, plugin.manipulate(this)];
                    case 7:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns true if dimension has a database backing it
     */
    Dimension.prototype.hasDatabase = function () {
        return (this.databasePlugin !== undefined &&
            this.configs.backingDatabase !== DatabaseType.NONE);
    };
    /**
     * Returns true if dimension has a storage plugin backing it
     */
    Dimension.prototype.hasStorage = function () {
        return (this.storagePlugin && this.configs.backingStorage !== StorageType.NONE);
    };
    /**
     * Cleanup function that cleans up any resources used and related to this dimension. For use right before
     * process exits and during testing.
     */
    Dimension.prototype.cleanup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cleanUpPromises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.cleaningUp) {
                            return [2 /*return*/, this.cleaningUp];
                        }
                        this.log.info('Cleaning up');
                        cleanUpPromises = [];
                        cleanUpPromises.push(this.cleanupMatches());
                        cleanUpPromises.push(this.cleanupTournaments());
                        if (this.getStation()) {
                            cleanUpPromises.push(this.getStation().stop());
                        }
                        this.cleaningUp = Promise.all(cleanUpPromises);
                        return [4 /*yield*/, this.cleaningUp];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Dimension.prototype.cleanupMatches = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cleanUpPromises;
            return __generator(this, function (_a) {
                cleanUpPromises = [];
                this.matches.forEach(function (match) {
                    cleanUpPromises.push(match.destroy());
                });
                return [2 /*return*/, Promise.all(cleanUpPromises)];
            });
        });
    };
    Dimension.prototype.cleanupTournaments = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cleanUpPromises;
            return __generator(this, function (_a) {
                cleanUpPromises = [];
                this.tournaments.forEach(function (tournament) {
                    cleanUpPromises.push(tournament.destroy());
                });
                return [2 /*return*/, Promise.all(cleanUpPromises)];
            });
        });
    };
    /**
     * The Station associated with this Dimension and current node instance
     */
    Dimension.Station = null;
    return Dimension;
}());
exports.Dimension = Dimension;
/**
 * Creates a dimension for use to start matches, run tournaments, etc.
 * @param design - the design to use
 * @param configs - optional configurations for the dimension
 */
function create(design, configs) {
    return new Dimension(design, configs);
}
exports.create = create;
//# sourceMappingURL=index.js.map