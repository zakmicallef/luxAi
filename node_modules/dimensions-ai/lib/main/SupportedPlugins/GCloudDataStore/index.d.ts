import { Database } from '../../Plugin/Database';
import { DeepPartial } from '../../utils/DeepPartial';
import { Dimension, NanoID } from '../../Dimension';
import { Match } from '../../Match';
import { Tournament } from '../../Tournament';
import { Plugin } from '../../Plugin';
import { Datastore } from '@google-cloud/datastore';
export declare class GCloudDataStore extends Database {
    name: string;
    type: Plugin.Type;
    datastore: Datastore;
    constructor(gcpConfigs: GCloudDataStore.Configs, configs?: DeepPartial<Database.Configs>);
    initialize(): Promise<void>;
    storeMatch(match: Match, governID: NanoID): Promise<any>;
    getMatch(id: NanoID): Promise<any>;
    getPlayerMatches(playerID: NanoID, governID: NanoID, offset?: number, limit?: number, order?: number): Promise<Array<Match>>;
    registerUser(username: string, password: string, userData?: any): Promise<void>;
    private getUserDatastoreKey;
    private getMatchDatastoreKey;
    private getTournamentConfigsDatastoreKey;
    /**
     * Gets user information. If public is false, will retrieve all information other than password
     * @param usernameOrID
     */
    getUser(usernameOrID: string, publicView?: boolean): Promise<Database.User>;
    loginUser(username: string, password: string): Promise<string>;
    updateUser(usernameOrID: string, update: Partial<Database.User>): Promise<void>;
    deleteUser(usernameOrID: string): Promise<void>;
    verifyToken(jwt: string): Promise<any>;
    isAdmin(user: Database.PublicUser): boolean;
    getUsersInTournament(tournamentKey: string, offset?: number, limit?: number): Promise<Array<Database.User>>;
    manipulate(dimension: Dimension): Promise<void>;
    storeTournamentConfigs(tournamentID: NanoID, tournamentConfigs: Tournament.TournamentConfigsBase, status: Tournament.Status): Promise<void>;
    getTournamentConfigsModificationDate(tournamentID: NanoID): Promise<Date>;
    getTournamentConfigs(tournamentID: NanoID): Promise<{
        configs: Tournament.TournamentConfigsBase;
        status: Tournament.Status;
    }>;
}
export declare namespace GCloudDataStore {
    /**
     * Configurations for Google Cloud Datastore
     */
    interface Configs {
        /**
         * Keyfile to use for authentication
         */
        keyFile: string;
    }
    /**
     * The kind of various groupings in the datastore
     */
    enum Kinds {
        /**
         * For all user data
         */
        USERS = "users",
        /**
         * Player ID data for uniqueness
         */
        PLAYER_IDS = "playerIds",
        /**
         * For all tournament configuration data
         */
        TOURNAMENT_CONFIGS = "tournamentConfigs",
        /**
         * For all match data
         */
        MATCHES = "matches"
    }
}
