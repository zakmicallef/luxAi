"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Database_1 = require("../../Plugin/Database");
var Tournament_1 = require("../../Tournament");
var utils_1 = require("../../Plugin/Database/utils");
var Plugin_1 = require("../../Plugin");
var bcryptjs_1 = __importDefault(require("bcryptjs"));
var datastore_1 = require("@google-cloud/datastore");
var match_1 = require("../../Station/routes/api/dimensions/match");
var DeepMerge_1 = require("../../utils/DeepMerge");
var DeepCopy_1 = require("../../utils/DeepCopy");
var utils_2 = require("../../utils");
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('dotenv').config();
var salt = bcryptjs_1.default.genSaltSync();
var GCloudDataStore = /** @class */ (function (_super) {
    __extends(GCloudDataStore, _super);
    function GCloudDataStore(gcpConfigs, configs) {
        if (configs === void 0) { configs = {}; }
        var _this = _super.call(this, configs) || this;
        _this.name = 'GCloud Data Store';
        _this.type = Plugin_1.Plugin.Type.DATABASE;
        _this.datastore = new datastore_1.Datastore({ keyFile: gcpConfigs.keyFile });
        return _this;
    }
    GCloudDataStore.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var existingUser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUser('admin')];
                    case 1:
                        existingUser = _a.sent();
                        if (!!existingUser) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.registerUser('admin', process.env.ADMIN_PASSWORD)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    GCloudDataStore.prototype.storeMatch = function (match, governID) {
        return __awaiter(this, void 0, void 0, function () {
            var data, strippedData, key;
            return __generator(this, function (_a) {
                data = __assign(__assign({}, match_1.pickMatch(match)), { governID: governID });
                strippedData = utils_2.stripFunctions(DeepCopy_1.deepCopy(data));
                key = this.getMatchDatastoreKey(match.id);
                return [2 /*return*/, this.datastore.save({
                        key: key,
                        data: strippedData,
                    })];
            });
        });
    };
    GCloudDataStore.prototype.getMatch = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = this.getMatchDatastoreKey(id);
                        return [4 /*yield*/, this.datastore.get(key)];
                    case 1: return [2 /*return*/, (_a.sent())[0]];
                }
            });
        });
    };
    GCloudDataStore.prototype.getPlayerMatches = function (playerID, governID, offset, limit, order) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 10; }
        if (order === void 0) { order = -1; }
        return __awaiter(this, void 0, void 0, function () {
            var query;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.datastore
                            .createQuery(GCloudDataStore.Kinds.MATCHES)
                            .filter('agents.tournamentID.id', '=', playerID)
                            .filter('governID', '=', governID)
                            .offset(offset)
                            .limit(limit)
                            .order('creationDate', { descending: order === -1 });
                        return [4 /*yield*/, this.datastore.runQuery(query)];
                    case 1: return [2 /*return*/, (_a.sent())[0]];
                }
            });
        });
    };
    GCloudDataStore.prototype.registerUser = function (username, password, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    userData) {
        return __awaiter(this, void 0, void 0, function () {
            var hash, playerID, playerIDkey, userKey, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hash = bcryptjs_1.default.hashSync(password, salt);
                        playerID = Tournament_1.Player.generatePlayerID();
                        playerIDkey = this.datastore.key([
                            GCloudDataStore.Kinds.USERS,
                            username,
                            GCloudDataStore.Kinds.PLAYER_IDS,
                            playerID,
                        ]);
                        userKey = this.getUserDatastoreKey(username);
                        user = {
                            username: username,
                            passwordHash: hash,
                            statistics: {
                                test: {
                                    nested: 'abc',
                                },
                            },
                            playerID: playerID,
                            meta: __assign({}, userData),
                        };
                        return [4 /*yield*/, this.datastore.insert({
                                key: userKey,
                                data: user,
                                excludeFromIndexes: ['passwordHash'],
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.datastore.insert({
                                key: playerIDkey,
                                data: {},
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GCloudDataStore.prototype.getUserDatastoreKey = function (username) {
        return this.datastore.key([GCloudDataStore.Kinds.USERS, username]);
    };
    GCloudDataStore.prototype.getMatchDatastoreKey = function (matchID) {
        return this.datastore.key([GCloudDataStore.Kinds.MATCHES, matchID]);
    };
    GCloudDataStore.prototype.getTournamentConfigsDatastoreKey = function (tournamentID) {
        return this.datastore.key([
            GCloudDataStore.Kinds.TOURNAMENT_CONFIGS,
            tournamentID,
        ]);
    };
    /**
     * Gets user information. If public is false, will retrieve all information other than password
     * @param usernameOrID
     */
    GCloudDataStore.prototype.getUser = function (usernameOrID, publicView) {
        if (publicView === void 0) { publicView = true; }
        return __awaiter(this, void 0, void 0, function () {
            var user, q, res, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        q = this.datastore
                            .createQuery(GCloudDataStore.Kinds.USERS)
                            .filter('playerID', '=', usernameOrID);
                        return [4 /*yield*/, this.datastore.runQuery(q)];
                    case 1:
                        res = _a.sent();
                        user = res[0][0]; // there should only be one user with this playerID
                        if (!!user) return [3 /*break*/, 3];
                        key = this.getUserDatastoreKey(usernameOrID);
                        return [4 /*yield*/, this.datastore.get(key)];
                    case 2:
                        user = (_a.sent())[0];
                        _a.label = 3;
                    case 3:
                        if (publicView && user) {
                            delete user.passwordHash;
                        }
                        return [2 /*return*/, user];
                }
            });
        });
    };
    GCloudDataStore.prototype.loginUser = function (username, password) {
        return __awaiter(this, void 0, void 0, function () {
            var userKey, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userKey = this.getUserDatastoreKey(username);
                        return [4 /*yield*/, this.datastore.get(userKey)];
                    case 1:
                        user = (_a.sent())[0];
                        if (user) {
                            if (bcryptjs_1.default.compareSync(password, user.passwordHash)) {
                                return [2 /*return*/, utils_1.generateToken(user)];
                            }
                            else {
                                throw new Error('Invalid password');
                            }
                        }
                        else {
                            throw new Error('Not a valid user');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    GCloudDataStore.prototype.updateUser = function (usernameOrID, update) {
        return __awaiter(this, void 0, void 0, function () {
            var user, userKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUser(usernameOrID)];
                    case 1:
                        user = _a.sent();
                        userKey = this.getUserDatastoreKey(user.username);
                        user = DeepMerge_1.deepMerge(user, update);
                        return [4 /*yield*/, this.datastore.update({
                                key: userKey,
                                data: user,
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GCloudDataStore.prototype.deleteUser = function (usernameOrID) {
        return __awaiter(this, void 0, void 0, function () {
            var user, userKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUser(usernameOrID)];
                    case 1:
                        user = _a.sent();
                        userKey = this.getUserDatastoreKey(user.username);
                        return [4 /*yield*/, this.datastore.delete({
                                key: userKey,
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GCloudDataStore.prototype.verifyToken = function (jwt) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, utils_1.verify(jwt)];
            });
        });
    };
    GCloudDataStore.prototype.isAdmin = function (user) {
        if (user.username === 'admin')
            return true;
        return false;
    };
    GCloudDataStore.prototype.getUsersInTournament = function (tournamentKey, offset, limit) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = -1; }
        return __awaiter(this, void 0, void 0, function () {
            var key, q;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = "statistics." + tournamentKey;
                        if (limit == -1) {
                            limit = 0;
                        }
                        else if (limit == 0) {
                            return [2 /*return*/, []];
                        }
                        q = this.datastore
                            .createQuery(GCloudDataStore.Kinds.USERS)
                            .filter(key + ".matchesPlayed", '>=', 0)
                            .offset(offset);
                        return [4 /*yield*/, this.datastore.runQuery(q)];
                    case 1: return [2 /*return*/, (_a.sent())[0]];
                }
            });
        });
    };
    GCloudDataStore.prototype.manipulate = function (dimension) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                dimension.configs.backingDatabase = this.name;
                return [2 /*return*/];
            });
        });
    };
    GCloudDataStore.prototype.storeTournamentConfigs = function (tournamentID, tournamentConfigs, status) {
        return __awaiter(this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = this.getTournamentConfigsDatastoreKey(tournamentID);
                        return [4 /*yield*/, this.datastore.upsert({
                                key: key,
                                data: {
                                    configs: utils_2.stripFunctions(DeepCopy_1.deepCopy(tournamentConfigs)),
                                    id: tournamentID,
                                    status: status,
                                    modificationDate: new Date(),
                                },
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GCloudDataStore.prototype.getTournamentConfigsModificationDate = function (tournamentID) {
        return __awaiter(this, void 0, void 0, function () {
            var key, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = this.getTournamentConfigsDatastoreKey(tournamentID);
                        return [4 /*yield*/, this.datastore.get(key)];
                    case 1:
                        data = (_a.sent())[0];
                        if (data) {
                            return [2 /*return*/, new Date(data.modificationDate)];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    GCloudDataStore.prototype.getTournamentConfigs = function (tournamentID) {
        return __awaiter(this, void 0, void 0, function () {
            var key, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = this.getTournamentConfigsDatastoreKey(tournamentID);
                        return [4 /*yield*/, this.datastore.get(key)];
                    case 1:
                        data = (_a.sent())[0];
                        if (data) {
                            return [2 /*return*/, { configs: data.configs, status: data.status }];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    return GCloudDataStore;
}(Database_1.Database));
exports.GCloudDataStore = GCloudDataStore;
(function (GCloudDataStore) {
    /**
     * The kind of various groupings in the datastore
     */
    var Kinds;
    (function (Kinds) {
        /**
         * For all user data
         */
        Kinds["USERS"] = "users";
        /**
         * Player ID data for uniqueness
         */
        Kinds["PLAYER_IDS"] = "playerIds";
        /**
         * For all tournament configuration data
         */
        Kinds["TOURNAMENT_CONFIGS"] = "tournamentConfigs";
        /**
         * For all match data
         */
        Kinds["MATCHES"] = "matches";
    })(Kinds = GCloudDataStore.Kinds || (GCloudDataStore.Kinds = {}));
})(GCloudDataStore = exports.GCloudDataStore || (exports.GCloudDataStore = {}));
exports.GCloudDataStore = GCloudDataStore;
//# sourceMappingURL=index.js.map