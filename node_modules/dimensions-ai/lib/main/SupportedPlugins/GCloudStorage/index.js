"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Storage_1 = require("../../Plugin/Storage");
var storage_1 = require("@google-cloud/storage");
var Dimension_1 = require("../../Dimension");
var Plugin_1 = require("../../Plugin");
var path_1 = __importDefault(require("path"));
var fs_1 = __importStar(require("fs"));
var LRUFileCache_1 = __importDefault(require("../../utils/LRUFileCache"));
var System_1 = require("../../utils/System");
var Logger_1 = require("../../Logger");
var DeepCopy_1 = require("../../utils/DeepCopy");
var DeepMerge_1 = require("../../utils/DeepMerge");
var GCloudStorage = /** @class */ (function (_super) {
    __extends(GCloudStorage, _super);
    function GCloudStorage(configs) {
        var _this = _super.call(this) || this;
        _this.name = 'GCloudStorage';
        _this.type = Plugin_1.Plugin.Type.STORAGE;
        _this.configs = {
            keyFilename: '',
            projectId: '',
            fileCacheMaxSize: 1024 * 1024 * 1024,
            loggingLevel: Logger_1.Logger.LEVEL.INFO,
            cacheDir: 'cache',
        };
        _this.configs = DeepMerge_1.deepMerge(_this.configs, DeepCopy_1.deepCopy(configs));
        // default cache size of 1 GB
        _this.lruFileCache = new LRUFileCache_1.default(_this.configs.fileCacheMaxSize, path_1.default.join(System_1.LOCAL_DIR, _this.configs.cacheDir));
        _this.log = new Logger_1.Logger(_this.configs.loggingLevel, 'GCloud-Storage');
        return _this;
    }
    /**
     * Initializer. Initializes the storage object and creates necessary buckets
     */
    GCloudStorage.prototype.initialize = function (dimension) {
        return __awaiter(this, void 0, void 0, function () {
            var bucketName, exists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bucketName = dimension.name.toLowerCase().replace(/ /g, '_') +
                            '_' +
                            dimension.id.toLowerCase();
                        this.storage = new storage_1.Storage({
                            keyFilename: this.configs.keyFilename,
                            projectId: this.configs.projectId,
                        });
                        return [4 /*yield*/, this.storage.bucket(bucketName).exists()];
                    case 1:
                        exists = _a.sent();
                        if (!!exists[0]) return [3 /*break*/, 3];
                        this.log.system("creating bucket " + bucketName);
                        return [4 /*yield*/, this.storage.createBucket(bucketName)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.dimensionBucket = this.storage.bucket(bucketName);
                        return [2 /*return*/];
                }
            });
        });
    };
    GCloudStorage.prototype.uploadTournamentFile = function (file, user, tournament) {
        return __awaiter(this, void 0, void 0, function () {
            var dest;
            var _this = this;
            return __generator(this, function (_a) {
                dest = "users/" + user.username + "_" + user.playerID + "/tournaments/" + tournament.getKeyName() + "/bot.zip";
                return [2 /*return*/, this.dimensionBucket
                        .upload(file, {
                        destination: dest,
                    })
                        .then(function () {
                        _this.log.system("uploaded tournament file for player " + user.playerID + " to " + dest);
                        return dest;
                    })];
            });
        });
    };
    GCloudStorage.prototype.upload = function (file, destination) {
        return __awaiter(this, void 0, void 0, function () {
            var dest;
            var _this = this;
            return __generator(this, function (_a) {
                dest = "" + (destination ? destination : path_1.default.basename(file));
                return [2 /*return*/, this.dimensionBucket
                        .upload(file, {
                        destination: dest,
                    })
                        .then(function () {
                        _this.log.system("uploaded file from " + file + " to " + dest);
                        return dest;
                    })];
            });
        });
    };
    GCloudStorage.prototype.download = function (key, destination, useCached) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        if (useCached) {
                            var cachedPath = _this.lruFileCache.get(key);
                            // if there is a cached path, use it
                            if (cachedPath) {
                                fs_1.copyFileSync(cachedPath, destination);
                                resolve(destination);
                                return;
                            }
                        }
                        var file = _this.dimensionBucket.file(key);
                        var ws = file
                            .createReadStream()
                            .pipe(fs_1.default.createWriteStream(destination));
                        ws.on('close', function () { return __awaiter(_this, void 0, void 0, function () {
                            var cachedPath;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.lruFileCache.add(key, destination)];
                                    case 1:
                                        cachedPath = _a.sent();
                                        this.log.system("writing from bucket " + key + " -> " + destination + "; cached to " + cachedPath);
                                        resolve(destination);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    })];
            });
        });
    };
    /**
     * Returns a download URL to use to download an object
     * @param key - key referencing the object to download
     */
    GCloudStorage.prototype.getDownloadURL = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            return __generator(this, function (_a) {
                options = {
                    version: 'v4',
                    action: 'read',
                    expires: new Date().getTime() + 15 * 60 * 1000,
                };
                return [2 /*return*/, this.dimensionBucket
                        .file(key)
                        .getSignedUrl(options)
                        .then(function (url) {
                        return url[0];
                    })];
            });
        });
    };
    GCloudStorage.prototype.manipulate = function (dimension) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                dimension.configs.backingDatabase = Dimension_1.StorageType.GCLOUD;
                return [2 /*return*/];
            });
        });
    };
    return GCloudStorage;
}(Storage_1.Storage));
exports.GCloudStorage = GCloudStorage;
//# sourceMappingURL=index.js.map