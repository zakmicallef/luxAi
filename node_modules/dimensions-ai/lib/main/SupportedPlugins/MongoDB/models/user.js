"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mongoose_1 = __importDefault(require("mongoose"));
var Schema = mongoose_1.default.Schema;
var DeepMerge_1 = require("../../../utils/DeepMerge");
var DeepCopy_1 = require("../../../utils/DeepCopy");
var Tournament_1 = require("../../../Tournament");
var defaultUserSchemaOptions = {
    creationDate: true,
};
var UserSchemaCreator = function (options) {
    if (options === void 0) { options = {}; }
    var schemaOptions = DeepMerge_1.deepMerge(DeepCopy_1.deepCopy(defaultUserSchemaOptions), options);
    var schema = new Schema({
        username: { type: String, index: true, required: true, unique: true },
        passwordHash: { type: String, required: true },
        playerID: {
            type: String,
            default: Tournament_1.Player.generatePlayerID,
            index: true,
            unique: true,
        },
        statistics: { type: Schema.Types.Mixed, default: {} },
        meta: {
            type: Schema.Types.Mixed,
            default: function () {
                return new Map();
            },
        },
    }, { minimize: false });
    // TODO: This can be more streamlined. Perhaps in the MatchSchemaCreator we also store the kind of type they should be
    if (schemaOptions.creationDate) {
        schema.add({
            creationDate: { type: Schema.Types.Date, default: Date.now },
        });
    }
    return schema;
};
exports.default = UserSchemaCreator;
//# sourceMappingURL=user.js.map