import mongoose from 'mongoose';
import { Plugin } from '../../Plugin';
import { Database } from '../../Plugin/Database';
import { Dimension, NanoID } from '../../Dimension';
import { Match } from '../../Match';
import { DeepPartial } from '../../utils/DeepPartial';
import { Tournament } from '../../Tournament';
import { nanoid } from '../..';
import { TournamentStatus } from '../../Tournament/TournamentStatus';
export declare class MongoDB extends Database {
    name: string;
    type: Plugin.Type;
    db: mongoose.Connection;
    mongoose: mongoose.Mongoose;
    models: MongoDB.Models;
    /** The MongoDB connection string used to connect to the database and read/write to it */
    connectionString: string;
    constructor(connectionString: string, configs?: DeepPartial<Database.Configs>);
    /**
     * Connects to the mongo database and returns the Connection object
     */
    connect(): Promise<mongoose.Connection>;
    initialize(): Promise<void>;
    storeMatch(match: Match, governID: nanoid): Promise<any>;
    getMatch(id: NanoID): Promise<any>;
    getPlayerMatches(usernameOrID: nanoid, governID: nanoid, offset?: number, limit?: number, order?: number): Promise<Array<Match>>;
    registerUser(username: string, password: string, userData?: any): Promise<any>;
    /**
     * Gets user information. If public is false, will retrieve all information other than password
     * @param usernameOrID
     */
    getUser(usernameOrID: string, publicView?: boolean): Promise<Database.User>;
    loginUser(username: string, password: string): Promise<string>;
    updateUser(usernameOrID: string, update: Partial<Database.User>): Promise<Database.User>;
    deleteUser(usernameOrID: string): Promise<void>;
    verifyToken(jwt: string): Promise<string>;
    isAdmin(user: Database.PublicUser): boolean;
    getUsersInTournament(tournamentKey: string, offset?: number, limit?: number): Promise<Array<Database.User>>;
    manipulate(dimension: Dimension): Promise<void>;
    storeTournamentConfigs(tournamentID: nanoid, tournamentConfigs: Tournament.TournamentConfigsBase, status: TournamentStatus): Promise<void>;
    getTournamentConfigsModificationDate(tournamentID: nanoid): Promise<Date>;
    getTournamentConfigs(tournamentID: nanoid): Promise<{
        configs: Tournament.TournamentConfigsBase;
        status: Tournament.Status;
    }>;
}
export declare namespace MongoDB {
    /**
     * See {@link Match} class for what these fields represent. They are copied here letter for letter. If set true, the
     * field will be included into the database
     */
    interface MatchSchemaOptions {
        state: boolean;
        results: boolean;
        creationDate: boolean;
        finishDate: boolean;
        agents: boolean;
    }
    /**
     * User Schema Options. If set to true, that field will be included into the database.
     */
    interface UserSchemaOptions {
        /** Creation date of the user */
        creationDate: boolean;
    }
    interface Models {
        user: mongoose.Model<mongoose.Document>;
        match: mongoose.Model<mongoose.Document>;
        tournamentConfigs: mongoose.Model<mongoose.Document>;
    }
}
