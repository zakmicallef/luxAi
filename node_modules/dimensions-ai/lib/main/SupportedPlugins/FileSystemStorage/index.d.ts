import { Storage } from '../../Plugin/Storage';
import { Dimension } from '../../Dimension';
import { Plugin } from '../../Plugin';
import { Database } from '../../Plugin/Database';
import { Tournament } from '../../Tournament';
import { Logger } from '../../Logger';
import { DeepPartial } from '../../utils/DeepPartial';
export declare class FileSystemStorage extends Storage {
    name: string;
    type: Plugin.Type;
    bucketPath: string;
    private lruFileCache;
    log: Logger;
    _useCacheCount: number;
    configs: FileSystemStorage.Configs;
    constructor(configs?: DeepPartial<FileSystemStorage.Configs>);
    /**
     * Initializer. Initializes the storage object and creates necessary buckets
     */
    initialize(dimension: Dimension): Promise<void>;
    writeFileToBucket(file: string, dest: string): Promise<void>;
    writeFileFromBucket(key: string, dest: string): Promise<void>;
    uploadTournamentFile(file: string, user: Database.User, tournament: Tournament): Promise<string>;
    upload(file: string, destination?: string): Promise<string>;
    download(key: string, destination: string, useCached: boolean): Promise<string>;
    /**
     * Returns a download URL to use to download an object
     * @param key - key referencing the object to download
     */
    getDownloadURL(key: string): Promise<string>;
    manipulate(dimension: Dimension): Promise<void>;
}
export declare namespace FileSystemStorage {
    interface Configs {
        maxCacheSize: number;
        cacheDir: string;
        loggingLevel: Logger.LEVEL;
    }
}
