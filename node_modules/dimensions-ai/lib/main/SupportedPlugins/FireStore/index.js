"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var firebase_admin_1 = __importDefault(require("firebase-admin"));
var Plugin_1 = require("../../Plugin");
var Database_1 = require("../../Plugin/Database");
var Dimension_1 = require("../../Dimension");
var match_1 = require("../../Station/routes/api/dimensions/match");
var bcryptjs_1 = __importDefault(require("bcryptjs"));
var utils_1 = require("../../Plugin/Database/utils");
var Tournament_1 = require("../../Tournament");
var DeepMerge_1 = require("../../utils/DeepMerge");
var DeepCopy_1 = require("../../utils/DeepCopy");
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('dotenv').config();
var salt = bcryptjs_1.default.genSaltSync();
var FireStore = /** @class */ (function (_super) {
    __extends(FireStore, _super);
    function FireStore(fireStoreConfigs, configs) {
        if (configs === void 0) { configs = {}; }
        var _this = _super.call(this, configs) || this;
        _this.name = 'FireStore';
        _this.type = Plugin_1.Plugin.Type.DATABASE;
        firebase_admin_1.default.initializeApp({
            credential: firebase_admin_1.default.credential.cert(fireStoreConfigs.keyFile),
        });
        return _this;
    }
    /**
     * Connects to the firestore database and returns the db object
     */
    FireStore.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.db = firebase_admin_1.default.firestore();
                this.db.settings({ ignoreUndefinedProperties: true });
                return [2 /*return*/, this.db];
            });
        });
    };
    FireStore.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var existingUser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connect()];
                    case 1:
                        _a.sent();
                        this.userCollection = this.db.collection(FireStore.Collections.USERS);
                        this.matchesCollection = this.db.collection(FireStore.Collections.MATCHES);
                        this.tournamentConfigsCollection = this.db.collection(FireStore.Collections.TOURNAMENT_CONFIGS);
                        return [4 /*yield*/, this.getUser('admin')];
                    case 2:
                        existingUser = _a.sent();
                        if (!!existingUser) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.registerUser('admin', process.env.ADMIN_PASSWORD)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FireStore.prototype.storeMatch = function (match, governID) {
        return __awaiter(this, void 0, void 0, function () {
            var data, plainAgentIDtoTournamentID;
            return __generator(this, function (_a) {
                data = __assign(__assign({}, match_1.pickMatch(match)), { governID: governID });
                // remove extra data
                delete data.configs;
                plainAgentIDtoTournamentID = {};
                data.mapAgentIDtoTournamentID.forEach(function (val, key) {
                    plainAgentIDtoTournamentID[key] = val;
                });
                data.mapAgentIDtoTournamentID = plainAgentIDtoTournamentID;
                return [2 /*return*/, this.matchesCollection.doc().set(data)];
            });
        });
    };
    FireStore.prototype.getMatch = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var snapshot;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.matchesCollection
                            .where('matchID', '==', id)
                            .get()];
                    case 1:
                        snapshot = _a.sent();
                        return [2 /*return*/, snapshot.docs[0].data()];
                }
            });
        });
    };
    FireStore.prototype.getPlayerMatches = function (playerID, governID, offset, limit, order) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = 10; }
        if (order === void 0) { order = -1; }
        return __awaiter(this, void 0, void 0, function () {
            var sortOrder, query, snapshot;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sortOrder = 'desc';
                        if (order > 0) {
                            sortOrder = 'asc';
                        }
                        query = this.matchesCollection
                            .where('governID', '==', governID)
                            .orderBy('creationDate', sortOrder)
                            .offset(offset);
                        if (limit == 0) {
                            return [2 /*return*/, []];
                        }
                        if (limit > 0) {
                            query = query.limit(limit);
                        }
                        return [4 /*yield*/, query.get()];
                    case 1:
                        snapshot = _a.sent();
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        return [2 /*return*/, snapshot.docs.map(function (d) { return d.data(); })];
                }
            });
        });
    };
    FireStore.prototype.registerUser = function (username, password, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    userData) {
        return __awaiter(this, void 0, void 0, function () {
            var hash;
            return __generator(this, function (_a) {
                hash = bcryptjs_1.default.hashSync(password, salt);
                return [2 /*return*/, this.userCollection.doc(username).set({
                        username: username,
                        passwordHash: hash,
                        statistics: {},
                        playerID: Tournament_1.Player.generatePlayerID(),
                        meta: __assign({}, userData),
                    })];
            });
        });
    };
    /**
     * Gets user information. If public is false, will retrieve all information other than password
     * @param usernameOrID
     */
    FireStore.prototype.getUser = function (usernameOrID, publicView) {
        if (publicView === void 0) { publicView = true; }
        return __awaiter(this, void 0, void 0, function () {
            var doc, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserDoc(usernameOrID)];
                    case 1:
                        doc = _a.sent();
                        if (doc === null) {
                            return [2 /*return*/, null];
                        }
                        user = doc.data();
                        if (user && publicView) {
                            user.passwordHash = '';
                        }
                        return [2 /*return*/, user];
                }
            });
        });
    };
    FireStore.prototype.getUserDoc = function (usernameOrID) {
        return __awaiter(this, void 0, void 0, function () {
            var snapshot;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userCollection
                            .where('playerID', '==', usernameOrID)
                            .get()];
                    case 1:
                        snapshot = _a.sent();
                        if (!snapshot.empty) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.userCollection
                                .where('username', '==', usernameOrID)
                                .get()];
                    case 2:
                        snapshot = _a.sent();
                        _a.label = 3;
                    case 3:
                        if (snapshot.empty) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, snapshot.docs[0]];
                }
            });
        });
    };
    FireStore.prototype.loginUser = function (username, password) {
        return __awaiter(this, void 0, void 0, function () {
            var snapshot, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userCollection
                            .where('username', '==', username)
                            .get()];
                    case 1:
                        snapshot = _a.sent();
                        if (snapshot.empty) {
                            throw new Error('Not a valid user');
                        }
                        user = snapshot.docs[0].data();
                        if (bcryptjs_1.default.compareSync(password, user.passwordHash)) {
                            return [2 /*return*/, utils_1.generateToken(user)];
                        }
                        else {
                            throw new Error('Invalid password');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    FireStore.prototype.updateUser = function (usernameOrID, update) {
        return __awaiter(this, void 0, void 0, function () {
            var doc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserDoc(usernameOrID)];
                    case 1:
                        doc = _a.sent();
                        if (doc === null) {
                            throw new Error('Not a valid user');
                        }
                        return [4 /*yield*/, doc.ref.update(update)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, DeepMerge_1.deepMerge(DeepCopy_1.deepCopy(doc.data()), DeepCopy_1.deepCopy(update))];
                }
            });
        });
    };
    FireStore.prototype.deleteUser = function (usernameOrID) {
        return __awaiter(this, void 0, void 0, function () {
            var doc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserDoc(usernameOrID)];
                    case 1:
                        doc = _a.sent();
                        return [4 /*yield*/, doc.ref.delete()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FireStore.prototype.verifyToken = function (jwt) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, utils_1.verify(jwt)];
            });
        });
    };
    FireStore.prototype.isAdmin = function (user) {
        if (user.username === 'admin')
            return true;
        return false;
    };
    FireStore.prototype.getUsersInTournament = function (tournamentKey, offset, limit) {
        if (offset === void 0) { offset = 0; }
        if (limit === void 0) { limit = -1; }
        return __awaiter(this, void 0, void 0, function () {
            var key, query, snapshot;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = "statistics." + tournamentKey;
                        if (limit == 0) {
                            return [2 /*return*/, []];
                        }
                        query = this.userCollection
                            .where(key + ".matchesPlayed", '>=', 0)
                            .offset(offset);
                        if (limit > 0) {
                            query = query.limit(limit);
                        }
                        return [4 /*yield*/, query.get()];
                    case 1:
                        snapshot = _a.sent();
                        return [2 /*return*/, snapshot.docs.map(function (d) { return d.data(); })];
                }
            });
        });
    };
    FireStore.prototype.manipulate = function (dimension) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                dimension.configs.backingDatabase = Dimension_1.DatabaseType.FIRESTORE;
                return [2 /*return*/];
            });
        });
    };
    FireStore.prototype.storeTournamentConfigs = function (tournamentID, tournamentConfigs, status) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tournamentConfigsCollection.doc(tournamentID).set({
                            status: status,
                            configs: tournamentConfigs,
                            modificationDate: new Date(),
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FireStore.prototype.getTournamentConfigsModificationDate = function (tournamentID) {
        return __awaiter(this, void 0, void 0, function () {
            var snapshot;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tournamentConfigsCollection
                            .doc(tournamentID)
                            .get()];
                    case 1:
                        snapshot = _a.sent();
                        if (snapshot.exists) {
                            return [2 /*return*/, new Date(snapshot.data().modificationDate)];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    FireStore.prototype.getTournamentConfigs = function (tournamentID) {
        return __awaiter(this, void 0, void 0, function () {
            var snapshot;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tournamentConfigsCollection
                            .doc(tournamentID)
                            .get()];
                    case 1:
                        snapshot = _a.sent();
                        return [2 /*return*/, snapshot.data()];
                }
            });
        });
    };
    return FireStore;
}(Database_1.Database));
exports.FireStore = FireStore;
(function (FireStore) {
    var Collections;
    (function (Collections) {
        Collections["MATCHES"] = "d_matches";
        Collections["USERS"] = "d_users";
        Collections["TOURNAMENT_CONFIGS"] = "d_tourney_configs";
    })(Collections = FireStore.Collections || (FireStore.Collections = {}));
})(FireStore = exports.FireStore || (exports.FireStore = {}));
exports.FireStore = FireStore;
//# sourceMappingURL=index.js.map