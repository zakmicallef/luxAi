"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var DeepMerge_1 = require("../utils/DeepMerge");
var DeepCopy_1 = require("../utils/DeepCopy");
var Logger_1 = require("../Logger");
/**
 * @class Design
 * @classdesc Abstract class detailing a Design to be used as the platform that holds match lifecycle logic for
 * updating and manipulating ongoing matches
 *
 * Refer to {@link Match} class and the {@link Agent} for exposed fields available for user's use when making your own
 * Design
 *
 * The important functions to implement are {@link initialize}, {@link update}, and {@link getResults}
 *
 */
var Design = /** @class */ (function () {
    /**
     * Design constructor
     * @param name - The name of the design
     * @param designOptions - The options for this design
     */
    function Design(name, designOptions) {
        if (designOptions === void 0) { designOptions = {}; }
        this.name = name;
        /** Logger */
        this.log = new Logger_1.Logger();
        // Copy defaults
        this.designOptions = DeepCopy_1.deepCopy(exports.DefaultDesignOptions);
        // Override with user provided params
        DeepMerge_1.deepMerge(this.designOptions, designOptions);
        this.log.detail("Design + MatchEngine Options", this.designOptions);
        // Set log level to default
        this.log.level = Logger_1.Logger.LEVEL.INFO;
        this.log.system("Initialized Design: " + this.name);
    }
    /**
     * Set log level of the design
     * @param level - level to set design logger to
     */
    Design.prototype.setLogLevel = function (level) {
        this.log.level = level;
    };
    /**
     * Get the design options associated with this `Design`
     */
    Design.prototype.getDesignOptions = function () {
        return this.designOptions;
    };
    /**
     * Creates a Design class wrapper around a custom design written without the use of Dimensions framework
     */
    Design.createCustom = function (name, overrideOptions) {
        return new CustomDesign(name, overrideOptions);
    };
    return Design;
}());
exports.Design = Design;
/**
 * This class is meant for wrapping around existing designs built without the use of Dimensions framework
 *
 * This is created so a user provided non-dimension framework based design can be used within the Dimensions framework
 * and leverage other features such as tournament running, an API for viewing relevant data, and automatic, scalable
 * competition running
 */
var CustomDesign = /** @class */ (function (_super) {
    __extends(CustomDesign, _super);
    function CustomDesign(name, overrideOptions) {
        var _this = this;
        // this should always be true
        overrideOptions.active = true;
        // pass in the override options to Design
        _this = _super.call(this, name, {
            override: overrideOptions,
        }) || this;
        return _this;
    }
    /**
     * Initializer. Declares any relevant state fields
     */
    CustomDesign.prototype.initialize = function (match) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                match.state = {
                    matchOutput: [],
                };
                match.results = [];
                return [2 /*return*/];
            });
        });
    };
    /**
     * Empty function, not used
     */
    /* istanbul ignore next */
    CustomDesign.prototype.update = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    /**
     * Returns the results stored. {@link MatchEngine.runCustom} should automatically populate match.results for us and so
     * we just return itt.
     * @param match - Match to get results of
     */
    CustomDesign.prototype.getResults = function (match) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, match.results];
            });
        });
    };
    return CustomDesign;
}(Design));
/**
 * Default Design Options
 */
exports.DefaultDesignOptions = {
    override: {
        active: false,
        command: 'echo NO COMMAND PROVIDED',
        conclude_command: 'D_MATCH_FINISHED',
        arguments: [],
        timeout: 1000 * 60 * 10,
        resultHandler: null,
    },
};
//# sourceMappingURL=index.js.map