"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * API for dimension's matches
 */
var express_1 = __importDefault(require("express"));
var error = __importStar(require("../../../../error"));
var router = express_1.default.Router();
/**
 * Auth requiring middleware
 */
exports.requireAuth = function (req, res, next) {
    if (!req.data.dimension.hasDatabase()) {
        next();
        return;
    }
    if (!req.data.dimension.getStation().configs.requireAuth) {
        req.data.dimension.databasePlugin.getUser('admin', false).then(function (admin) {
            req.data.user = admin;
            next();
        });
        return;
    }
    var authHeader = req.get('Authorization');
    if (!authHeader)
        return next(new error.Unauthorized('Missing auth token'));
    var authHead = authHeader.split(' ');
    var invalidAuthFormat = authHead.length !== 2 ||
        authHead[0] !== 'Bearer' ||
        authHead[1].length === 0;
    if (invalidAuthFormat)
        return next(new error.Unauthorized('Invalid auth token format'));
    var dimension = req.data.dimension;
    dimension.databasePlugin
        .verifyToken(authHead[1])
        .then(function (data) {
        req.data.user = data;
        next();
    })
        .catch(next);
};
/**
 * Doesn't require auth, just stores user data if supplied
 */
exports.storeAuth = function (req, res, next) {
    if (!req.data.dimension.hasDatabase()) {
        next();
        return;
    }
    if (!req.data.dimension.getStation().configs.requireAuth) {
        req.data.dimension.databasePlugin.getUser('admin', false).then(function (admin) {
            req.data.user = admin;
            next();
        });
        return;
    }
    var authHeader = req.get('Authorization');
    if (!authHeader)
        return next();
    var authHead = authHeader.split(' ');
    var invalidAuthFormat = authHead.length !== 2 ||
        authHead[0] !== 'Bearer' ||
        authHead[1].length === 0;
    if (invalidAuthFormat)
        return next();
    var dimension = req.data.dimension;
    dimension.databasePlugin
        .verifyToken(authHead[1])
        .then(function (data) {
        req.data.user = data;
        next();
    })
        .catch(function () {
        next();
    });
};
/**
 * Admin requiring middleware
 */
exports.requireAdmin = function (req, res, next) {
    if (!req.data.dimension.hasDatabase()) {
        next();
        return;
    }
    if (!req.data.dimension.getStation().configs.requireAuth) {
        req.data.dimension.databasePlugin.getUser('admin', false).then(function (admin) {
            req.data.user = admin;
            next();
        });
        return;
    }
    var authHeader = req.get('Authorization');
    if (!authHeader)
        return next(new error.Unauthorized('Missing auth token'));
    var authHead = authHeader.split(' ');
    var invalidAuthFormat = authHead.length !== 2 ||
        authHead[0] !== 'Bearer' ||
        authHead[1].length === 0;
    if (invalidAuthFormat)
        return next(new error.Unauthorized('Invalid auth token format'));
    var dimension = req.data.dimension;
    dimension.databasePlugin
        .verifyToken(authHead[1])
        .then(function (data) {
        if (dimension.databasePlugin.isAdmin(data)) {
            req.data.user = data;
            next();
        }
        else {
            next(new error.Unauthorized('Requires admin access'));
        }
    })
        .catch(next);
};
/**
 * POST
 * Registers a user. Requires username, password in body. Optional userData is passed
 */
router.post('/register', function (req, res, next) {
    if (!req.body.username)
        return next(new error.BadRequest('Missing username'));
    if (!req.body.password)
        return next(new error.BadRequest('Missing password'));
    var dimension = req.data.dimension;
    dimension.databasePlugin
        .registerUser(req.body.username, req.body.password, req.body.userData)
        .then(function () {
        res.json({ error: null, msg: 'success' });
    })
        .catch(next);
});
/**
 * POST
 * Logins a user. Requires username, password in body
 * Returns a jwt
 */
router.post('/login', function (req, res, next) {
    if (!req.body.username)
        return next(new error.BadRequest('Missing username'));
    if (!req.body.password)
        return next(new error.BadRequest('Missing password'));
    var dimension = req.data.dimension;
    dimension.databasePlugin
        .loginUser(req.body.username, req.body.password)
        .then(function (jwt) {
        res.json({ error: null, token: jwt });
    })
        .catch(next);
});
/**
 * POST
 * Verifies a user's token
 */
router.post('/verify', function (req, res, next) {
    var authHeader = req.get('Authorization');
    if (!authHeader)
        return res.json({
            error: 'Auth token must be specified',
            authenticated: false,
        });
    var authHead = authHeader.split(' ');
    var invalidAuthFormat = authHead.length !== 2 ||
        authHead[0] !== 'Bearer' ||
        authHead[1].length === 0;
    if (invalidAuthFormat)
        return res.json({
            error: 'Invalid auth token format',
            authenticated: false,
        });
    var dimension = req.data.dimension;
    dimension.databasePlugin
        .verifyToken(authHead[1])
        .then(function () {
        res.json({ error: null });
    })
        .catch(next);
});
exports.default = router;
//# sourceMappingURL=index.js.map