"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * API for dimension's tournaments
 */
var express_1 = __importDefault(require("express"));
var error = __importStar(require("../../../../error"));
var Tournament_1 = require("../../../../../Tournament");
var path_1 = __importDefault(require("path"));
var match_1 = __importStar(require("../match"));
var utils_1 = require("../../../../../utils");
var auth_1 = require("../auth");
var handleBotUpload_1 = require("../../../../handleBotUpload");
var DimensionError_1 = require("../../../../../DimensionError");
var System_1 = require("../../../../../utils/System");
var child_process_1 = require("child_process");
var TournamentTypes_1 = require("../../../../../Tournament/TournamentTypes");
var router = express_1.default.Router();
/**
 * Get tournament by tournamentID in request. Requires dimension to be stored.
 */
var getTournament = function (req, res, next) {
    var tournament = req.data.dimension.tournaments.get(req.params.tournamentID);
    if (!tournament) {
        return next(new error.BadRequest("No tournament found with name or id of '" + req.params.tournamentID + "' in dimension " + req.data.dimension.id + " - '" + req.data.dimension.name + "'"));
    }
    req.data.tournament = tournament;
    next();
};
router.use('/:tournamentID', getTournament);
/**
 * Picks out relevant fields for a tournament
 */
exports.pickTournament = function (t) {
    return utils_1.pick(t, 'configs', 'id', 'log', 'name', 'status');
};
/**
 * GET
 * Gets tournament details
 */
router.get('/:tournamentID', function (req, res) {
    var picked = exports.pickTournament(req.data.tournament);
    res.json({ error: null, tournament: picked });
});
// attach the match API
router.use('/:tournamentID/match', match_1.default);
/**
 * GET
 * Returns all matches in the dimension
 */
router.get('/:tournamentID/match', function (req, res) {
    var matchData = {};
    req.data.tournament.matches.forEach(function (match, key) {
        matchData[key] = match_1.pickMatch(match);
    });
    res.json({ error: null, matches: matchData });
});
/**
 * GET
 *
 * Get the current match queue
 */
router.get('/:tournamentID/match-queue', function (req, res) {
    res.json({ error: null, matchQueue: req.data.tournament.matchQueue });
});
/**
 * POST
 *
 * Set configs by specifying in a configs field of the body. This does a deep merge that overwrites only the fields
 * specified. Note that functions in the fields are always constant, and can never change.
 */
router.post('/:tournamentID/configs', auth_1.requireAdmin, function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var tournament, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!req.body.configs)
                    return [2 /*return*/, next(new error.BadRequest('Missing configs'))];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 5, , 6]);
                if (!(req.data.tournament.configs.type === TournamentTypes_1.TournamentType.LADDER)) return [3 /*break*/, 3];
                tournament = req.data.tournament;
                return [4 /*yield*/, tournament.setConfigs(req.body.configs)];
            case 2:
                _a.sent();
                res.json({ error: null });
                return [3 /*break*/, 4];
            case 3:
                req.data.tournament.setConfigs(req.body.configs);
                _a.label = 4;
            case 4: return [3 /*break*/, 6];
            case 5:
                err_1 = _a.sent();
                return [2 /*return*/, next(err_1)];
            case 6: return [2 /*return*/];
        }
    });
}); });
/**
 * POST
 *
 * Run a tournament if it is initialized or resume it if it was stopped
 */
router.post('/:tournamentID/run', auth_1.requireAdmin, function (req, res, next) {
    if (req.data.tournament.status === Tournament_1.Tournament.Status.INITIALIZED) {
        req.data.tournament
            .run({}, true)
            .then(function () {
            res.json({ error: null, msg: 'Running Tournament' });
        })
            .catch(next);
    }
    else if (req.data.tournament.status === Tournament_1.Tournament.Status.STOPPED) {
        req.data.tournament
            .resume(true)
            .then(function () {
            res.json({ error: null, msg: 'Running Tournament' });
        })
            .catch(next);
    }
    else if (req.data.tournament.status === Tournament_1.Tournament.Status.RUNNING) {
        return next(new error.BadRequest('Tournament is already running'));
    }
    else {
        return next(new error.BadRequest("Tournament cannot be run. Status is " + req.data.tournament.status));
    }
});
/**
 * POST
 * Stops a tournament if it isn't stopped
 */
router.post('/:tournamentID/stop', auth_1.requireAdmin, function (req, res, next) {
    if (req.data.tournament.status !== Tournament_1.Tournament.Status.RUNNING) {
        return next(new error.BadRequest("Can't stop a tournament that isn't running"));
    }
    // stop the tournament
    req.data.tournament
        .stop(true)
        .then(function () {
        res.json({ error: null, msg: 'Stopped Tournament' });
    })
        .catch(next);
});
/**
 * GET
 * Gets ranks for the tournament
 */
router.get('/:tournamentID/ranks', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var ranks, offset, limit, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _b.trys.push([0, 5, , 6]);
                ranks = [];
                offset = parseInt(req.query.offset ? req.query.offset : 0);
                limit = parseInt(req.query.limit ? req.query.limit : -1);
                if (!(req.data.tournament.configs.type === TournamentTypes_1.TournamentType.LADDER)) return [3 /*break*/, 2];
                return [4 /*yield*/, req.data.tournament.getRankings(offset, limit)];
            case 1:
                ranks = _b.sent();
                return [3 /*break*/, 4];
            case 2: return [4 /*yield*/, req.data.tournament.getRankings()];
            case 3:
                ranks = _b.sent();
                _b.label = 4;
            case 4:
                res.json({ error: null, ranks: ranks });
                return [3 /*break*/, 6];
            case 5:
                _a = _b.sent();
                return [2 /*return*/, next(new error.InternalServerError("Couldn't retrieve rankings"))];
            case 6: return [2 /*return*/];
        }
    });
}); });
/**
 * DELETE
 *
 * Deletes a match
 */
router.delete('/:tournamentID/match/:matchID', auth_1.requireAdmin, function (req, res, next) {
    return req.data.tournament
        .removeMatch(req.params.matchID)
        .then(function () {
        res.json({ error: null });
    })
        .catch(function (err) {
        return next(new error.InternalServerError(err));
    });
    // TODO: There should be a better way to abstract this so we don't need to store something related to the match API
    // in the dimensions API.
    // I also don't want to store a removeMatch function in the match itself as that doesn't make sense.
});
/**
 * DELETE
 *
 * Removes a player with specified playerID
 */
router.delete('/:tournamentID/players/:playerID', auth_1.requireAuth, function (req, res, next) {
    if (!req.data.dimension.databasePlugin.isAdmin(req.data.user) &&
        req.params.playerID !== req.data.user.playerID) {
        return next(new error.Unauthorized("Insufficient permissions to delete this player"));
    }
    return req.data.tournament
        .removePlayer(req.params.playerID)
        .then(function () {
        res.json({ error: null });
    })
        .catch(function (err) {
        if (err instanceof DimensionError_1.TournamentPlayerDoesNotExistError) {
            return next(new error.BadRequest("Player with ID " + req.params.playerID + " does not exist"));
        }
        else {
            return next(new error.InternalServerError("Something went wrong: " + err.message));
        }
    });
});
/**
 * GET
 *
 * Retrieves player stat of the ongoing tournament
 */
router.get('/:tournamentID/players/:playerID', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var tournament, playerStat;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                tournament = req.data.tournament;
                return [4 /*yield*/, tournament.getPlayerStat(req.params.playerID)];
            case 1:
                playerStat = (_a.sent()).playerStat;
                if (playerStat) {
                    res.json({ error: null, player: playerStat });
                }
                else {
                    res.json({ error: null, player: null });
                }
                return [2 /*return*/];
        }
    });
}); });
/**
 * GET
 *
 * Retrieves past player matches. Requires a backing database
 */
router.get('/:tournamentID/players/:playerID/match', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var db, matchData, err_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!req.query.offset || !req.query.limit || !req.query.order)
                    return [2 /*return*/, next(new error.BadRequest('Missing params'))];
                db = req.data.dimension.databasePlugin;
                if (!req.data.dimension.hasDatabase()) return [3 /*break*/, 5];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, db.getPlayerMatches(req.params.playerID, req.params.tournamentID, parseInt(req.query.offset), parseInt(req.query.limit), parseInt(req.query.order))];
            case 2:
                matchData = _a.sent();
                res.json({ error: null, matches: matchData });
                return [3 /*break*/, 4];
            case 3:
                err_2 = _a.sent();
                return [2 /*return*/, next(err_2)];
            case 4: return [3 /*break*/, 6];
            case 5: return [2 /*return*/, next(new error.NotImplemented('Requires a database plugin in order to retrieve past matches'))];
            case 6: return [2 /*return*/];
        }
    });
}); });
/**
 * GET
 *
 * Returns a url to download the bot if a storage service is provided, otherwise directly returns the bot file
 */
router.get('/:tournamentID/players/:playerID/bot', auth_1.requireAuth, function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var tournament;
    return __generator(this, function (_a) {
        if (!req.data.dimension.databasePlugin.isAdmin(req.data.user) &&
            req.params.playerID !== req.data.user.playerID) {
            return [2 /*return*/, next(new error.Unauthorized("Insufficient permissions to retrieve this player"))];
        }
        tournament = req.data.tournament;
        req.data.dimension.databasePlugin
            .getUser(req.params.playerID)
            .then(function (user) {
            var player = user.statistics[tournament.getKeyName()].player;
            if (req.data.dimension.hasStorage()) {
                var key = player.botkey;
                req.data.dimension.storagePlugin.getDownloadURL(key).then(function (url) {
                    res.json({ error: null, url: url });
                });
            }
            else {
                // send a zipped up version of their bot directly if no storage service is used
                res.sendFile(player.zipFile);
            }
        })
            .catch(next);
        return [2 /*return*/];
    });
}); });
/**
 * POST
 *
 * Reset rankings
 */
router.post('/:tournamentID/reset', auth_1.requireAdmin, function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var tournament;
    return __generator(this, function (_a) {
        if (req.data.tournament.configs.type !== TournamentTypes_1.TournamentType.LADDER) {
            return [2 /*return*/, next(new error.BadRequest("Can't reset a tournament that is not of the ladder type"))];
        }
        tournament = req.data.tournament;
        tournament
            .resetRankings()
            .then(function () {
            res.json({ error: null, message: 'ranks reset' });
        })
            .catch(next);
        return [2 /*return*/];
    });
}); });
/**
 * POST Route
 * Takes in form data of names: string[], files: File[], playerIDs: string[]
 * file must be a zip
 * id is a tournament ID string specified only if you want to upload a new bot to replace an existing one
 *
 */
router.post('/:tournamentID/upload/', auth_1.requireAuth, function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var data, err_3, bot, id, user, zipLoc, botkey, storage;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (req.data.dimension.getStation().configs.disableUploads) {
                    return [2 /*return*/, next(new error.BadRequest('Uploads are disabled'))];
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, handleBotUpload_1.handleBotUpload(req, req.data.user)];
            case 2:
                data = _a.sent();
                return [3 /*break*/, 4];
            case 3:
                err_3 = _a.sent();
                return [2 /*return*/, next(err_3)];
            case 4:
                if (data.length > 1)
                    return [2 /*return*/, next(new error.BadRequest('Can only upload one tournament bot at a time'))];
                bot = data[0];
                id = bot.playerID;
                user = req.data.user;
                if (!req.data.dimension.hasDatabase()) return [3 /*break*/, 6];
                if (!req.data.dimension.databasePlugin.isAdmin(req.data.user)) return [3 /*break*/, 6];
                return [4 /*yield*/, req.data.dimension.databasePlugin.getUser(id)];
            case 5:
                user = _a.sent();
                if (!user)
                    return [2 /*return*/, next(new error.BadRequest('Invalid player ID'))];
                _a.label = 6;
            case 6:
                zipLoc = path_1.default.join(path_1.default.dirname(bot.file), 'bot.zip');
                if (!req.data.dimension.hasStorage()) return [3 /*break*/, 8];
                storage = req.data.dimension.storagePlugin;
                return [4 /*yield*/, storage.uploadTournamentFile(bot.originalFile, user, req.data.tournament)];
            case 7:
                botkey = _a.sent();
                // as we use storage, we can delete the extracted content safely
                System_1.removeDirectorySync(path_1.default.dirname(bot.file));
                return [3 /*break*/, 9];
            case 8:
                // store the zip file
                child_process_1.spawnSync('cp', [bot.originalFile, zipLoc]);
                _a.label = 9;
            case 9:
                // if no id given, we will generate an ID to use. Generated here using the below function to avoid duplicate ids
                if (!id) {
                    id = req.data.tournament.generateNextTournamentIDString();
                }
                if (bot.name || bot.botdir || botkey) {
                    req.data.tournament.addplayer({
                        file: bot.file,
                        name: bot.name,
                        zipFile: zipLoc,
                        botdir: bot.botdir,
                        botkey: botkey,
                    }, id);
                }
                else {
                    req.data.tournament.addplayer(bot.file, id);
                }
                res.json({ error: null, message: 'Successfully uploaded bot' });
                return [2 /*return*/];
        }
    });
}); });
/**
 * POST
 *
 * Upload a bot for a single player by corresponding key. This route does not verify the botkey, nor pathtofile
 */
router.post('/:tournamentID/upload-by-key', auth_1.requireAuth, function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var user, err_4;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!req.data.dimension.hasStorage())
                    return [2 /*return*/, next(new error.NotImplemented('Server does not have storage setup'))];
                if (!req.body.playerID)
                    return [2 /*return*/, next(new error.BadRequest('Missing player ID'))];
                if (!req.body.botkey)
                    return [2 /*return*/, next(new error.BadRequest('Missing botkey'))];
                if (!req.body.botname)
                    return [2 /*return*/, next(new error.BadRequest('Missing botname'))];
                if (!req.body.pathtofile)
                    return [2 /*return*/, next(new error.BadRequest('Missing pathtofile'))];
                user = req.data.user;
                if (!req.data.dimension.hasDatabase()) return [3 /*break*/, 2];
                if (!req.data.dimension.databasePlugin.isAdmin(req.data.user)) return [3 /*break*/, 2];
                return [4 /*yield*/, req.data.dimension.databasePlugin.getUser(req.body.playerID)];
            case 1:
                user = _a.sent();
                if (!user)
                    return [2 /*return*/, next(new error.BadRequest('Invalid player ID'))];
                _a.label = 2;
            case 2:
                _a.trys.push([2, 4, , 5]);
                return [4 /*yield*/, req.data.tournament.addplayer({
                        file: req.body.pathtofile,
                        name: req.body.botname,
                        // the nulls are ok as these aren't used if storage is used
                        zipFile: null,
                        botdir: null,
                        botkey: req.body.botkey,
                    }, req.body.playerID)];
            case 3:
                _a.sent();
                return [3 /*break*/, 5];
            case 4:
                err_4 = _a.sent();
                return [2 /*return*/, next(new error.InternalServerError(err_4))];
            case 5:
                res.json({
                    error: null,
                    message: 'Succesfully uploaded bot',
                });
                return [2 /*return*/];
        }
    });
}); });
/**
 * POST
 *
 * Create queued matches
 */
router.post('/:tournamentID/match-queue/', auth_1.requireAdmin, function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var t;
    return __generator(this, function (_a) {
        if (!req.body.matchQueue)
            return [2 /*return*/, next(new error.BadRequest('Missing matchQueue field'))];
        if (!req.body.matchQueue.length)
            return [2 /*return*/, next(new error.BadRequest('Must provide an array'))];
        if (req.data.tournament.type === Tournament_1.Tournament.Type.LADDER) {
            t = req.data.tournament;
            t.scheduleMatches.apply(t, req.body.matchQueue);
            res.json({
                error: null,
                message: "Queued " + req.body.matchQueue.length + " matches",
            });
        }
        return [2 /*return*/];
    });
}); });
exports.default = router;
//# sourceMappingURL=index.js.map