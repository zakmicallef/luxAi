"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * API for Dimensions. Primarily returns all data there is to return
 */
var express_1 = __importDefault(require("express"));
var match_1 = __importStar(require("./match"));
var tournament_1 = __importStar(require("./tournament"));
var error = __importStar(require("../../../error"));
var utils_1 = require("../../../../utils");
var user_1 = __importDefault(require("./user"));
var auth_1 = __importDefault(require("./auth"));
var handleBotUpload_1 = require("../../../handleBotUpload");
var path_1 = __importDefault(require("path"));
var System_1 = require("../../../../utils/System");
var router = express_1.default.Router();
/**
 * GET
 *
 * Gets all observed dimensions
 */
router.get('/', function (req, res) {
    var dimMap = req.app.get('dimensions');
    var data = {};
    dimMap.forEach(function (dimension) {
        data[dimension.id] = pickDimension(dimension);
    });
    res.json({ error: null, dimensions: data });
});
/**
 * GET
 *
 * Get a dimension from id
 */
var getDimension = function (req, res, next) {
    var id = req.params.id;
    // TODO: the following line may never occur actually
    if (!id)
        return next(new error.BadRequest('ID must be provided'));
    var dimension = req.app.get('dimensions').get(id);
    if (!dimension) {
        return next(new error.BadRequest('No Dimension found'));
    }
    req.data.dimension = dimension;
    next();
};
var pickDesign = function (d) {
    var picked = __assign({}, utils_1.pick(d, 'log', 'name'));
    picked['designOptions'] = d.getDesignOptions();
    return picked;
};
var pickDimension = function (d) {
    var picked = __assign(__assign({}, utils_1.pick(d, 'configs', 'id', 'log', 'name', 'statistics')), { design: null });
    var pickedDesign = pickDesign(d.design);
    picked.design = pickedDesign;
    return picked;
};
router.use('/:id', getDimension);
/**
 * GET
 *
 * Get the dimension and relevant data
 */
router.get('/:id', function (req, res) {
    res.json({ error: null, dimension: pickDimension(req.data.dimension) });
});
/**
 * Use the match API here
 */
router.use('/:id/match', match_1.default);
/**
 * Returns all matches in the dimension
 */
router.get('/:id/match', function (req, res) {
    var matchData = {};
    req.data.dimension.matches.forEach(function (match, key) {
        matchData[key] = match_1.pickMatch(match);
    });
    res.json({ error: null, matches: matchData });
});
/**
 * POST
 *
 * Creates a match using the provided zip files of bots.
 * Requires files: Array<zip files>, paths: JSON encoding of array of paths to the main file in the zip file,
 * names?: Array<string>
 */
router.post('/:id/match', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var data_1, dim, match, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                return [4 /*yield*/, handleBotUpload_1.handleBotUpload(req)];
            case 1:
                data_1 = _a.sent();
                dim = req.data.dimension;
                return [4 /*yield*/, dim.createMatch(data_1)];
            case 2:
                match = _a.sent();
                match
                    .run()
                    .then(function () {
                    // delete all bot files and their directories as they are temporary and generated
                    data_1.forEach(function (_a) {
                        var file = _a.file;
                        var dir = path_1.default.dirname(file);
                        System_1.removeDirectory(dir);
                    });
                })
                    .catch(function () {
                    // ignore errors
                });
                res.json({ error: null, matchID: match.id });
                return [3 /*break*/, 4];
            case 3:
                err_1 = _a.sent();
                return [2 /*return*/, next(err_1)];
            case 4: return [2 /*return*/];
        }
    });
}); });
/**
 * DELETE
 *
 * Deletes a match
 */
router.delete('/:id/match/:matchID', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, req.data.dimension.removeMatch(req.params.matchID)];
            case 1:
                _a.sent();
                res.json({ error: null });
                return [3 /*break*/, 3];
            case 2:
                error_1 = _a.sent();
                return [2 /*return*/, next(new error_1.InternalServerError('Something went wrong'))];
            case 3: return [2 /*return*/];
        }
    });
}); });
/**
 * GET
 *
 * Gets all tournaments in a dimension
 */
router.get('/:id/tournaments', function (req, res) {
    var pickedTournaments = {};
    req.data.dimension.tournaments.forEach(function (t) {
        pickedTournaments[t.id] = tournament_1.pickTournament(t);
    });
    res.json({ error: null, tournaments: pickedTournaments });
});
/**
 * Use the tournament API
 */
router.use('/:id/tournaments', tournament_1.default);
exports.requiresDatabase = function (req, res, next) {
    // throw a error if no database detected
    var dimension = req.data.dimension;
    if (dimension.hasDatabase()) {
        next();
    }
    else {
        next(new error.InternalServerError("No database setup for dimension - ID: " + dimension.id + ", name: " + dimension.name));
    }
};
/** Require that user and auth routes need database setup */
router.use('/:id/users', exports.requiresDatabase);
router.use('/:id/auth', exports.requiresDatabase);
/**
 * Use the user API
 */
router.use('/:id/users', user_1.default);
/**
 * Use the auth API
 */
router.use('/:id/auth', auth_1.default);
exports.default = router;
//# sourceMappingURL=index.js.map