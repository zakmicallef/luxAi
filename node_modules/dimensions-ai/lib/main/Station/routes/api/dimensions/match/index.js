"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * API for dimension's matches
 */
var express_1 = __importDefault(require("express"));
var error = __importStar(require("../../../../error"));
var Match_1 = require("../../../../../Match");
var utils_1 = require("../../../../../utils");
var agent_1 = __importStar(require("./agent"));
var auth_1 = require("../auth");
var router = express_1.default.Router();
/**
 * Get match by matchID. Requires a tournament or dimension to be stored.
 *
 * For tournaments, it will get a match only if it's active. Otherwise a database plugin is needed in order to retrieve
 * the match. NOTE that the database plugin will not recover all of the same match data as usually returned from active
 * matches
 *
 * For dimension run match (via {@link Dimension.runMatch}), it is retrievable as long as it has not been destroyed
 */
exports.getMatch = function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var match, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (req.data.tournament) {
                    match = req.data.tournament.matches.get(req.params.matchID);
                }
                else if (req.data.dimension) {
                    match = req.data.dimension.matches.get(req.params.matchID);
                }
                else {
                    return [2 /*return*/, next(new error.BadRequest("System error. match API route was added out of order"))];
                }
                if (!!match) return [3 /*break*/, 4];
                if (!req.data.dimension.hasDatabase()) return [3 /*break*/, 4];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, req.data.dimension.databasePlugin.getMatch(req.params.matchID)];
            case 2:
                match = _a.sent();
                return [3 /*break*/, 4];
            case 3:
                error_1 = _a.sent();
                return [2 /*return*/, next(error_1)];
            case 4:
                if (!match) {
                    return [2 /*return*/, next(new error.BadRequest("No match found with name or id of '" + req.params.matchID + "' in dimension " + req.data.dimension.id + " - '" + req.data.dimension.name + "'"))];
                }
                req.data.match = match;
                next();
                return [2 /*return*/];
        }
    });
}); };
/**
 * Pick relevant fields of a match
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
exports.pickMatch = function (match) {
    var picked = __assign(__assign({}, utils_1.pick(match, 'configs', 'creationDate', 'id', 'mapAgentIDtoTournamentID', 'matchStatus', 'name', 'finishDate', 'results', 'replayFileKey', 'replayFile')), { agents: [] });
    if (match.agents) {
        picked.agents = match.agents.map(function (agent) { return agent_1.pickAgent(agent); });
    }
    return picked;
};
router.use('/:matchID', exports.getMatch);
/**
 * Get match details
 */
router.get('/:matchID', function (req, res) {
    res.json({ error: null, match: exports.pickMatch(req.data.match) });
});
/**
 * Gets whatever is stored in the match results field
 */
router.get('/:matchID/results', function (req, res) {
    res.json({ error: null, results: req.data.match.results || null });
});
/**
 * GET
 *
 * Retrieves replay file
 */
router.get('/:matchID/replay', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var storage, _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                if (!req.data.dimension.hasStorage()) return [3 /*break*/, 4];
                if (!req.data.match.replayFileKey) return [3 /*break*/, 2];
                storage = req.data.dimension.storagePlugin;
                _b = (_a = res).send;
                _c = {
                    error: null
                };
                return [4 /*yield*/, storage.getDownloadURL(req.data.match.replayFileKey)];
            case 1:
                _b.apply(_a, [(_c.url = _d.sent(),
                        _c)]);
                return [3 /*break*/, 3];
            case 2: return [2 /*return*/, next(new error.BadRequest('Replay for this match does not exist or was not stored'))];
            case 3: return [3 /*break*/, 5];
            case 4:
                if (req.data.match.replayFile) {
                    res.sendFile(req.data.match.replayFile);
                }
                else {
                    return [2 /*return*/, next(new error.BadRequest('Replay file for this match does not exist or was not stored'))];
                }
                _d.label = 5;
            case 5: return [2 /*return*/];
        }
    });
}); });
/**
 * Gets whatever is stored in the match state
 */
router.get('/:matchID/state', function (req, res) {
    res.json({ error: null, state: req.data.match.state || null });
});
/**
 * POST
 *
 * Run/resume a match if it hasn't initialiized, or was finished, or is currently stopped
 */
router.post('/:matchID/run', auth_1.requireAdmin, function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    var error_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 4, , 5]);
                if (!(req.data.match.matchStatus === Match_1.Match.Status.FINISHED ||
                    req.data.match.matchStatus === Match_1.Match.Status.UNINITIALIZED)) return [3 /*break*/, 2];
                return [4 /*yield*/, req.data.match.initialize()];
            case 1:
                _a.sent();
                return [3 /*break*/, 3];
            case 2:
                if (req.data.match.matchStatus === Match_1.Match.Status.RUNNING) {
                    return [2 /*return*/, next(new error.BadRequest('Match is already running'))];
                }
                _a.label = 3;
            case 3:
                // run or resume the match
                if (req.data.match.matchStatus === Match_1.Match.Status.STOPPED) {
                    req.data.match.resume();
                }
                else {
                    // run and do nothing with the error
                    // match should be in ready state
                    req.data.match.run().catch(utils_1.noop);
                }
                res.json({ error: null, msg: 'Running Match' });
                return [3 /*break*/, 5];
            case 4:
                error_2 = _a.sent();
                return [2 /*return*/, next(new error_2.InternalServerError('Match Failed to Run'))];
            case 5: return [2 /*return*/];
        }
    });
}); });
/**
 * POST
 * Stop a match
 */
router.post('/:matchID/stop', auth_1.requireAdmin, function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (req.data.match.matchStatus === Match_1.Match.Status.STOPPED) {
            return [2 /*return*/, next(new error.BadRequest('Match is already stopped'))];
        }
        if (req.data.match.matchStatus === Match_1.Match.Status.FINISHED) {
            return [2 /*return*/, next(new error.BadRequest('Match is already finished'))];
        }
        if (req.data.match.matchStatus === Match_1.Match.Status.READY) {
            return [2 /*return*/, next(new error.BadRequest("Match hasn't started and can't be stopped as a result"))];
        }
        if (req.data.match.matchStatus === Match_1.Match.Status.UNINITIALIZED) {
            return [2 /*return*/, next(new error.BadRequest("Can't stop an uninitialized match"))];
        }
        return [2 /*return*/, req.data.match
                .stop()
                .then(function () {
                res.json({ error: null, msg: 'Stopped Match' });
            })
                .catch(function () {
                return next(new error.InternalServerError("Couldn't stop the match"));
            })];
    });
}); });
router.use('/:matchID/agents', agent_1.default);
exports.default = router;
//# sourceMappingURL=index.js.map