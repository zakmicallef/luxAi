"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var error = __importStar(require("../error"));
var formidable_1 = __importDefault(require("formidable"));
var extract_zip_1 = __importDefault(require("extract-zip"));
var fs_1 = require("fs");
var path_1 = __importDefault(require("path"));
var __1 = require("..");
var utils_1 = require("../../utils");
var System_1 = require("../../utils/System");
/**
 * Returns path to unzipped bot contents and the main file. If user provided, will only handle upload if user
 * matches playerID given
 */
exports.handleBotUpload = function (req, user) {
    return new Promise(function (resolve, reject) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore - this function is callable
        var form = formidable_1.default({ multiples: true });
        try {
            form.parse(req, function (err, fields, files) { return __awaiter(void 0, void 0, void 0, function () {
                var uploads, paths, names, playerIDs, uploadProcessPromises, i, upload, pathToFile, botName, playerID;
                return __generator(this, function (_a) {
                    if (err) {
                        throw err;
                    }
                    if (files.files === undefined)
                        throw new error.BadRequest('No file(s) provided');
                    if (fields.paths === undefined)
                        throw new error.BadRequest('No file path(s) provided');
                    if (!files.files.length) {
                        files.files = [files.files];
                    }
                    fields.paths = JSON.parse(fields.paths);
                    fields.names = JSON.parse(fields.names);
                    fields.playerIDs = JSON.parse(fields.playerIDs);
                    if (!fields.paths.length)
                        throw new error.BadRequest('No file path(s) provided');
                    if (fields.paths.length != files.files.length)
                        throw new error.BadRequest('Paths and File arrays mismatch');
                    uploads = files.files;
                    paths = fields.paths;
                    names = fields.names;
                    playerIDs = fields.playerIDs;
                    if (!names)
                        names = [];
                    uploadProcessPromises = [];
                    for (i = 0; i < uploads.length; i++) {
                        upload = uploads[i];
                        pathToFile = paths[i];
                        if (pathToFile.indexOf('/') !== -1 ||
                            pathToFile.indexOf('\\') !== -1) {
                            reject(new error.BadRequest('Path for file/directory cannot have / or \\ in them. File/directory must be in root directory after unzipping file'));
                            return [2 /*return*/];
                        }
                        botName = names[i];
                        playerID = playerIDs[i];
                        if (user) {
                            // if differrent playerID and isn't admin, throw insufficient permissions
                            if (user.playerID !== playerID &&
                                !req.data.dimension.databasePlugin.isAdmin(user)) {
                                reject(new error.Unauthorized('Insufficient permissions to upload bot for this player ID'));
                                return [2 /*return*/];
                            }
                        }
                        uploadProcessPromises.push(processUpload(upload, pathToFile, botName, playerID));
                    }
                    Promise.all(uploadProcessPromises).then(resolve).catch(reject);
                    return [2 /*return*/];
                });
            }); });
        }
        catch (err) {
            reject(err);
        }
    });
};
var processUpload = function (file, pathToFile, botName, playerID) { return __awaiter(void 0, void 0, void 0, function () {
    var id, botdir, err_1, pathToBotFile, name;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                id = utils_1.genID(18);
                botdir = __1.BOT_DIR + '/bot-' + playerID + '-' + id;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, extract_zip_1.default(file.path, {
                        dir: botdir,
                    })];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                err_1 = _a.sent();
                // clean up
                System_1.removeDirectory(botdir);
                throw new error.InternalServerError(err_1);
            case 4:
                pathToBotFile = path_1.default.join(botdir, pathToFile);
                name = botName;
                // check if file exists
                if (!fs_1.existsSync(pathToBotFile)) {
                    // remove folder if doesn't exist
                    System_1.removeDirectory(botdir);
                    throw new error.BadRequest("Extracted zip file to bot-" + playerID + "-" + id + " but path to file " + pathToFile + " does not exist in the extracted directory");
                }
                else {
                    return [2 /*return*/, {
                            name: name,
                            file: pathToBotFile,
                            playerID: playerID,
                            botdir: botdir,
                            originalFile: file.path,
                        }];
                }
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=index.js.map