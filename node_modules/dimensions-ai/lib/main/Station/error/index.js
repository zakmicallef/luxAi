"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base error class.
 *
 * Supports HTTP status codes and a custom message.
 * From the ACM Membership Portal Backend repository
 */
var HttpError = /** @class */ (function (_super) {
    __extends(HttpError, _super);
    function HttpError(status, message) {
        var _this = _super.call(this, message.toString()) || this;
        _this.status = status;
        _this.name = _this.constructor.name;
        _this.status = status;
        _this.message = message.toString();
        return _this;
    }
    return HttpError;
}(Error));
exports.HttpError = HttpError;
var UserError = /** @class */ (function (_super) {
    __extends(UserError, _super);
    function UserError(message) {
        return _super.call(this, 200, message || 'User Error') || this;
    }
    return UserError;
}(HttpError));
exports.UserError = UserError;
var BadRequest = /** @class */ (function (_super) {
    __extends(BadRequest, _super);
    function BadRequest(message) {
        return _super.call(this, 400, message || 'Bad Request') || this;
    }
    return BadRequest;
}(HttpError));
exports.BadRequest = BadRequest;
var Unauthorized = /** @class */ (function (_super) {
    __extends(Unauthorized, _super);
    function Unauthorized(message) {
        return _super.call(this, 401, message || 'Unauthorized') || this;
    }
    return Unauthorized;
}(HttpError));
exports.Unauthorized = Unauthorized;
var Forbidden = /** @class */ (function (_super) {
    __extends(Forbidden, _super);
    function Forbidden(message) {
        return _super.call(this, 403, message || 'Permission denied') || this;
    }
    return Forbidden;
}(HttpError));
exports.Forbidden = Forbidden;
var NotFound = /** @class */ (function (_super) {
    __extends(NotFound, _super);
    function NotFound(message) {
        return _super.call(this, 404, message || 'Resource not found') || this;
    }
    return NotFound;
}(HttpError));
exports.NotFound = NotFound;
var Unprocessable = /** @class */ (function (_super) {
    __extends(Unprocessable, _super);
    function Unprocessable(message) {
        return _super.call(this, 422, message || 'Unprocessable request') || this;
    }
    return Unprocessable;
}(HttpError));
exports.Unprocessable = Unprocessable;
var InternalServerError = /** @class */ (function (_super) {
    __extends(InternalServerError, _super);
    function InternalServerError(message) {
        return _super.call(this, 500, message || 'Internal server error') || this;
    }
    return InternalServerError;
}(HttpError));
exports.InternalServerError = InternalServerError;
var NotImplemented = /** @class */ (function (_super) {
    __extends(NotImplemented, _super);
    function NotImplemented(message) {
        return _super.call(this, 501, message || 'Not Implemented') || this;
    }
    return NotImplemented;
}(HttpError));
exports.NotImplemented = NotImplemented;
/**
 * General error handling middleware. Attaches to Express so that throwing or calling next() with
 * an error ends up here and all errors are handled uniformly.
 */
exports.errorHandler = function (log) { return function (err, req, res, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
next) {
    if (!err)
        err = new InternalServerError('An unknown error occurred in the errorHandler');
    if (!err.status)
        err = new InternalServerError(err.message);
    if (err.status >= 500) {
        log.error("" + err.status, err);
    }
    else {
        // otherwise just log the error message at the warning level
        log.warn(err.status + ": " + err.message);
    }
    res.status(err.status).json({
        error: {
            status: err.status,
            message: "" + err.message,
        },
    });
}; };
//# sourceMappingURL=index.js.map