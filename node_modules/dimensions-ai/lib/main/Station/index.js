"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var path_1 = __importDefault(require("path"));
var status_1 = __importDefault(require("./routes/api/status"));
var dimensions_1 = __importDefault(require("./routes/api/dimensions"));
var Logger_1 = require("../Logger");
var error = __importStar(require("./error"));
var cors_1 = __importDefault(require("cors"));
var body_parser_1 = __importDefault(require("body-parser"));
var DeepMerge_1 = require("../utils/DeepMerge");
var DeepCopy_1 = require("../utils/DeepCopy");
exports.BOT_DIR = path_1.default.join(__dirname, '../../../../local/bots');
var Station = /** @class */ (function () {
    function Station(name, observedDimensions, configs) {
        var _this = this;
        if (name === void 0) { name = ''; }
        if (configs === void 0) { configs = {}; }
        this.id = 0;
        this.port = 9000;
        this.webport = 3000;
        this.maxAttempts = 16;
        this.log = new Logger_1.Logger(Logger_1.Logger.LEVEL.INFO, 'Station Log');
        this.configs = {
            disableUploads: false,
            loggingLevel: Logger_1.Logger.LEVEL.INFO,
            requireAuth: true,
        };
        this.configs = DeepMerge_1.deepMerge(this.configs, DeepCopy_1.deepCopy(configs));
        // set logging level
        this.log.level = this.configs.loggingLevel;
        // store ID, set name and logger identifier
        this.id = Station._id;
        if (name) {
            this.name = name;
        }
        else {
            this.name = "Station_" + this.id;
        }
        Station._id++;
        this.log.identifier = this.name + ' Log';
        this.app = express_1.default(); // api app
        // CORS
        this.app.use(cors_1.default());
        this.app.use(body_parser_1.default.json());
        this.app.use(body_parser_1.default.urlencoded({
            extended: true,
        }));
        // store all observed dimensions
        if (observedDimensions instanceof Array) {
            var dimensionsMap_1 = new Map();
            observedDimensions.forEach(function (dim) {
                dimensionsMap_1.set(dim.id, dim);
            });
            this.app.set('dimensions', dimensionsMap_1);
        }
        else {
            var m = new Map();
            m.set(observedDimensions.id, observedDimensions);
            this.app.set('dimensions', m);
        }
        // store in each request a data object
        var initReqData = function (req, res, next) {
            req.data = {};
            next();
        };
        this.app.use('/**/*', initReqData);
        this.app.get('/', function (req, res) {
            res.json({ msg: 'api live at /api' });
        });
        this.app.get('/api', function (req, res) {
            res.json({ msg: 'api live at /api' });
        });
        /**
         * Link up routes
         * Status - Status of everything
         * Dimensions - Api to access all dimensions functions, match functions, etc.
         */
        this.app.use('/api/status', status_1.default);
        this.app.use('/api/dimensions', dimensions_1.default);
        // Set up error handler
        this.app.use(error.errorHandler(this.log));
        this.log.system("All middleware setup");
        // Successful start of app messages and setups
        var successStart = function () {
            _this.log.info("Running '" + _this.name + "' API at port " + _this.port + ". API served at http://localhost:" + _this.port);
            var dims = [];
            _this.app
                .get('dimensions')
                .forEach(function (dim) { return dims.push(dim.name); });
            _this.log.info("Observing dimensions: " + dims);
        };
        this.tryToListen(this.app, this.port)
            .then(function (port) {
            _this.port = port;
            successStart();
        })
            .catch(function () {
            _this.log.error("Station: " + _this.name + ", couldn't find an open port after 16 attempts");
        });
    }
    /**
     * Try to listen to this.maxAttempts ports. Resolves with the port nunber used
     */
    Station.prototype.tryToListen = function (app, startingPort) {
        var _this = this;
        // Try to listen function without breaking if port is busy. try up to an 16 ports (16 is arbitrary #)
        var attempts = 0;
        return new Promise(function (resolve, reject) {
            _this.server = app
                .listen(startingPort)
                .on('error', function () {
                attempts++;
                // this.log.warn(`${this.name} - Failed attempt ${attempts}`);
                if (attempts < _this.maxAttempts) {
                    _this.tryToListen(app, startingPort + 1).then(function () {
                        resolve(startingPort + 1);
                    });
                }
                else {
                    reject();
                }
            })
                .on('listening', function () {
                resolve(startingPort);
            });
        });
    };
    Station.prototype.setLogLevel = function (level) {
        this.log.level = level;
    };
    /**
     * Restart Station server / API
     * Resolves with the port number used
     */
    Station.prototype.restart = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.log.warn('RESTARTING');
            _this.server.close(function (err) {
                if (err)
                    reject(err);
                _this.tryToListen(_this.app, _this.port).then(resolve).catch(reject);
            });
        });
    };
    /**
     * Stop the Station server / API
     */
    Station.prototype.stop = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.log.warn('Stopping');
            _this.server.close(function (err) {
                if (err)
                    reject(err);
                resolve();
            });
        });
    };
    Station.prototype.observe = function (dimension) {
        var dimMap = this.app.get('dimensions');
        dimMap.set(dimension.id, dimension);
        this.app.set('dimensions', dimMap);
    };
    Station._id = 0;
    return Station;
}());
exports.Station = Station;
//# sourceMappingURL=index.js.map